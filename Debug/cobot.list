
cobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000421c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080043f4  080043f4  000143f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004404  08004404  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004404  08004404  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004404  08004404  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800440c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08004418  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08004418  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cffa  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e8c  00000000  00000000  0002d079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  0002ef08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2f  00000000  00000000  0002fd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d074  00000000  00000000  000308b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e649  00000000  00000000  0004d92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be1d6  00000000  00000000  0005bf74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cfc  00000000  00000000  0011a14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0011de48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080043dc 	.word	0x080043dc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080043dc 	.word	0x080043dc

08000218 <as5047p_sendData>:
 * @param as5047p_handle AS5047P handle.
 * @param address Register address.
 * @param data Data.
 */
void as5047p_sendData(as5047p_init_t* as5047p, uint16_t address, uint16_t data)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	460b      	mov	r3, r1
 8000222:	807b      	strh	r3, [r7, #2]
 8000224:	4613      	mov	r3, r2
 8000226:	803b      	strh	r3, [r7, #0]
  uint16_t frame = data & 0x3FFF;
 8000228:	883b      	ldrh	r3, [r7, #0]
 800022a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800022e:	81fb      	strh	r3, [r7, #14]

  /* Data frame bit 14 always low(0). */
  BIT_MODITY(frame, 14, 0);
 8000230:	89fb      	ldrh	r3, [r7, #14]
 8000232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000236:	81fb      	strh	r3, [r7, #14]

  /* Parity bit(even) calculated on the lower 15 bits. */
  if (!is_evenParity(frame)){
 8000238:	89fb      	ldrh	r3, [r7, #14]
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f86f 	bl	800031e <is_evenParity>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d107      	bne.n	8000256 <as5047p_sendData+0x3e>
    BIT_TOGGLE(frame, 15);
 8000246:	89fb      	ldrh	r3, [r7, #14]
 8000248:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 800024c:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 8000250:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8000254:	81fb      	strh	r3, [r7, #14]
  }

  as5047p_sendCommand(as5047p, address, OP_WRITE);
 8000256:	887b      	ldrh	r3, [r7, #2]
 8000258:	2200      	movs	r2, #0
 800025a:	4619      	mov	r1, r3
 800025c:	6878      	ldr	r0, [r7, #4]
 800025e:	f000 f81d 	bl	800029c <as5047p_sendCommand>
  as5047p->write_reg(frame);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	89fa      	ldrh	r2, [r7, #14]
 8000268:	4610      	mov	r0, r2
 800026a:	4798      	blx	r3
}
 800026c:	bf00      	nop
 800026e:	3710      	adds	r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <as5047p_readData>:
 * @param as5047p_handle AS5047P handle.
 * @param address Register address.
 * @return Data.
 */
uint16_t as5047p_readData(as5047p_init_t* as5047p, uint16_t address)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	807b      	strh	r3, [r7, #2]
  as5047p_sendCommand(as5047p, address, OP_READ);
 8000280:	887b      	ldrh	r3, [r7, #2]
 8000282:	2201      	movs	r2, #1
 8000284:	4619      	mov	r1, r3
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f000 f808 	bl	800029c <as5047p_sendCommand>
  return as5047p->read_reg();
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	4798      	blx	r3
 8000292:	4603      	mov	r3, r0
}
 8000294:	4618      	mov	r0, r3
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <as5047p_sendCommand>:
 * @param as5047p_handle AS5047P handle.
 * @param address Register address.
 * @param op_read_write Read of write opration.
 */
static void as5047p_sendCommand(as5047p_init_t* as5047p, uint16_t address, uint8_t op_read_write)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	460b      	mov	r3, r1
 80002a6:	807b      	strh	r3, [r7, #2]
 80002a8:	4613      	mov	r3, r2
 80002aa:	707b      	strb	r3, [r7, #1]
  uint16_t frame = address & 0x3FFF;
 80002ac:	887b      	ldrh	r3, [r7, #2]
 80002ae:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80002b2:	81fb      	strh	r3, [r7, #14]

  /* R/W: 0 for write, 1 for read. */
  BIT_MODITY(frame, 14, op_read_write);
 80002b4:	787b      	ldrb	r3, [r7, #1]
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	425b      	negs	r3, r3
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	b21a      	sxth	r2, r3
 80002be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80002c2:	4053      	eors	r3, r2
 80002c4:	b21b      	sxth	r3, r3
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	89fb      	ldrh	r3, [r7, #14]
 80002d0:	4053      	eors	r3, r2
 80002d2:	81fb      	strh	r3, [r7, #14]

  /* Parity bit(even) calculated on the lower 15 bits. */
  if (!is_evenParity(frame))
 80002d4:	89fb      	ldrh	r3, [r7, #14]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f821 	bl	800031e <is_evenParity>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d107      	bne.n	80002f2 <as5047p_sendCommand+0x56>
  {
    BIT_TOGGLE(frame, 15);
 80002e2:	89fb      	ldrh	r3, [r7, #14]
 80002e4:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 80002e8:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 80002ec:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80002f0:	81fb      	strh	r3, [r7, #14]
  }

  as5047p->write_reg(frame);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	89fa      	ldrh	r2, [r7, #14]
 80002f8:	4610      	mov	r0, r2
 80002fa:	4798      	blx	r3
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <as5047p_nop>:
 * @brief No operation instruction.
 *
 * @param as5047p_handle AS5047P handle.
 */
static void as5047p_nop(as5047p_init_t* as5047p_handle)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  /* Reading the NOP register is equivalent to a nop (no operation) instruction. */
  as5047p_sendCommand(as5047p_handle, AS5047P_NOP, OP_READ);
 800030c:	2201      	movs	r2, #1
 800030e:	2100      	movs	r1, #0
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f7ff ffc3 	bl	800029c <as5047p_sendCommand>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <is_evenParity>:

/**
 * @brief Check data even parity.
 */
static uint8_t is_evenParity(uint16_t data)
{
 800031e:	b480      	push	{r7}
 8000320:	b085      	sub	sp, #20
 8000322:	af00      	add	r7, sp, #0
 8000324:	4603      	mov	r3, r0
 8000326:	80fb      	strh	r3, [r7, #6]
  uint8_t shift = 1;
 8000328:	2301      	movs	r3, #1
 800032a:	73fb      	strb	r3, [r7, #15]
  while (shift < (sizeof(data) * 8))
 800032c:	e00c      	b.n	8000348 <is_evenParity+0x2a>
  {
    data ^= (data >> shift);
 800032e:	88fa      	ldrh	r2, [r7, #6]
 8000330:	7bfb      	ldrb	r3, [r7, #15]
 8000332:	fa42 f303 	asr.w	r3, r2, r3
 8000336:	b21a      	sxth	r2, r3
 8000338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800033c:	4053      	eors	r3, r2
 800033e:	b21b      	sxth	r3, r3
 8000340:	80fb      	strh	r3, [r7, #6]
    shift <<= 1;
 8000342:	7bfb      	ldrb	r3, [r7, #15]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	73fb      	strb	r3, [r7, #15]
  while (shift < (sizeof(data) * 8))
 8000348:	7bfb      	ldrb	r3, [r7, #15]
 800034a:	2b0f      	cmp	r3, #15
 800034c:	d9ef      	bls.n	800032e <is_evenParity+0x10>
  }
  return !(data & 0x1);
 800034e:	88fb      	ldrh	r3, [r7, #6]
 8000350:	f003 0301 	and.w	r3, r3, #1
 8000354:	2b00      	cmp	r3, #0
 8000356:	bf0c      	ite	eq
 8000358:	2301      	moveq	r3, #1
 800035a:	2300      	movne	r3, #0
 800035c:	b2db      	uxtb	r3, r3
}
 800035e:	4618      	mov	r0, r3
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr

0800036a <as5047p_config>:
/* ------------------------------------------------------ */
/*                   GLOBAL FUNCTIONS                     */
/* ------------------------------------------------------ */

void as5047p_config(as5047p_init_t *as5047p, uint8_t settings1, uint8_t settings2)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	b082      	sub	sp, #8
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	460b      	mov	r3, r1
 8000374:	70fb      	strb	r3, [r7, #3]
 8000376:	4613      	mov	r3, r2
 8000378:	70bb      	strb	r3, [r7, #2]
  /* SETTINGS1 bit 0 --> Factory Setting: Pre-Programmed to 1. */
  BIT_MODITY(settings1, 0, 1);
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	2b00      	cmp	r3, #0
 8000382:	bf0c      	ite	eq
 8000384:	2301      	moveq	r3, #1
 8000386:	2300      	movne	r3, #0
 8000388:	b2db      	uxtb	r3, r3
 800038a:	461a      	mov	r2, r3
 800038c:	78fb      	ldrb	r3, [r7, #3]
 800038e:	4053      	eors	r3, r2
 8000390:	70fb      	strb	r3, [r7, #3]

  /* SETTINGS1 bit 1 --> Not Used: Pre-Programmed to 0, must not be overwritten. */
  BIT_MODITY(settings1, 1, 0);
 8000392:	78fb      	ldrb	r3, [r7, #3]
 8000394:	f023 0302 	bic.w	r3, r3, #2
 8000398:	70fb      	strb	r3, [r7, #3]

  as5047p_sendData(as5047p, AS5047P_SETTINGS1, (uint16_t)(settings1 & 0x00FF));
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	b29b      	uxth	r3, r3
 800039e:	461a      	mov	r2, r3
 80003a0:	2118      	movs	r1, #24
 80003a2:	6878      	ldr	r0, [r7, #4]
 80003a4:	f7ff ff38 	bl	8000218 <as5047p_sendData>
  as5047p_sendData(as5047p, AS5047P_SETTINGS2, (uint16_t)(settings2 & 0x00FF));
 80003a8:	78bb      	ldrb	r3, [r7, #2]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	2119      	movs	r1, #25
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff31 	bl	8000218 <as5047p_sendData>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <as5047p_setZero>:
 *
 * @param as5047p_handle AS5047P handle.
 * @param position Position raw value.
 */
void as5047p_setZero(as5047p_init_t* as5047p, uint16_t position)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	460b      	mov	r3, r1
 80003c8:	807b      	strh	r3, [r7, #2]
  /* 8 most significant bits of the zero position. */
  as5047p_sendData(as5047p, AS5047P_ZPOSM, ((position >> 6) & 0x00FF));
 80003ca:	887b      	ldrh	r3, [r7, #2]
 80003cc:	099b      	lsrs	r3, r3, #6
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	461a      	mov	r2, r3
 80003d6:	2116      	movs	r1, #22
 80003d8:	6878      	ldr	r0, [r7, #4]
 80003da:	f7ff ff1d 	bl	8000218 <as5047p_sendData>

  /* 6 least significant bits of the zero position. */
  as5047p_sendData(as5047p, AS5047P_ZPOSL, (position & 0x003F));
 80003de:	887b      	ldrh	r3, [r7, #2]
 80003e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	461a      	mov	r2, r3
 80003e8:	2117      	movs	r1, #23
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f7ff ff14 	bl	8000218 <as5047p_sendData>

  as5047p_nop(as5047p);
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f7ff ff87 	bl	8000304 <as5047p_nop>
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <spi_write>:
#include "encoder.h"

extern SPI_HandleTypeDef hspi3;

void spi_write(uint16_t data)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = (uint8_t)(data & 0xFF);
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	b2db      	uxtb	r3, r3
 800040e:	723b      	strb	r3, [r7, #8]
	buffer[1] = (uint8_t)((data >> 8) & 0xFF);
 8000410:	88fb      	ldrh	r3, [r7, #6]
 8000412:	0a1b      	lsrs	r3, r3, #8
 8000414:	b29b      	uxth	r3, r3
 8000416:	b2db      	uxtb	r3, r3
 8000418:	727b      	strb	r3, [r7, #9]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2104      	movs	r1, #4
 800041e:	4811      	ldr	r0, [pc, #68]	; (8000464 <spi_write+0x64>)
 8000420:	f001 f8c6 	bl	80015b0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi3, buffer, 1, HAL_MAX_DELAY);
 8000424:	f107 0108 	add.w	r1, r7, #8
 8000428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800042c:	2201      	movs	r2, #1
 800042e:	480e      	ldr	r0, [pc, #56]	; (8000468 <spi_write+0x68>)
 8000430:	f001 ff31 	bl	8002296 <HAL_SPI_Transmit>
 8000434:	4603      	mov	r3, r0
 8000436:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000438:	2201      	movs	r2, #1
 800043a:	2104      	movs	r1, #4
 800043c:	4809      	ldr	r0, [pc, #36]	; (8000464 <spi_write+0x64>)
 800043e:	f001 f8b7 	bl	80015b0 <HAL_GPIO_WritePin>
	for(int i=0; i<10000; i++);
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	e002      	b.n	800044e <spi_write+0x4e>
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	3301      	adds	r3, #1
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	f242 720f 	movw	r2, #9999	; 0x270f
 8000454:	4293      	cmp	r3, r2
 8000456:	ddf7      	ble.n	8000448 <spi_write+0x48>
}
 8000458:	bf00      	nop
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	48000c00 	.word	0x48000c00
 8000468:	20000028 	.word	0x20000028

0800046c <spi_read>:

uint16_t spi_read(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
	uint8_t buffer[2];
	uint16_t val;

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2104      	movs	r1, #4
 8000476:	4814      	ldr	r0, [pc, #80]	; (80004c8 <spi_read+0x5c>)
 8000478:	f001 f89a 	bl	80015b0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Receive(&hspi3, buffer, 1, HAL_MAX_DELAY);
 800047c:	1d39      	adds	r1, r7, #4
 800047e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000482:	2201      	movs	r2, #1
 8000484:	4811      	ldr	r0, [pc, #68]	; (80004cc <spi_read+0x60>)
 8000486:	f002 f874 	bl	8002572 <HAL_SPI_Receive>
 800048a:	4603      	mov	r3, r0
 800048c:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800048e:	2201      	movs	r2, #1
 8000490:	2104      	movs	r1, #4
 8000492:	480d      	ldr	r0, [pc, #52]	; (80004c8 <spi_read+0x5c>)
 8000494:	f001 f88c 	bl	80015b0 <HAL_GPIO_WritePin>
	for(int i=0; i<10000; i++);
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	e002      	b.n	80004a4 <spi_read+0x38>
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	3301      	adds	r3, #1
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80004aa:	4293      	cmp	r3, r2
 80004ac:	ddf7      	ble.n	800049e <spi_read+0x32>
	val = ((uint16_t)buffer[1]<<8) | buffer[0];
 80004ae:	797b      	ldrb	r3, [r7, #5]
 80004b0:	021b      	lsls	r3, r3, #8
 80004b2:	b21a      	sxth	r2, r3
 80004b4:	793b      	ldrb	r3, [r7, #4]
 80004b6:	b21b      	sxth	r3, r3
 80004b8:	4313      	orrs	r3, r2
 80004ba:	b21b      	sxth	r3, r3
 80004bc:	813b      	strh	r3, [r7, #8]

	return val;
 80004be:	893b      	ldrh	r3, [r7, #8]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3710      	adds	r7, #16
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	48000c00 	.word	0x48000c00
 80004cc:	20000028 	.word	0x20000028

080004d0 <delay>:

void delay(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 80004d4:	200a      	movs	r0, #10
 80004d6:	f000 fdcb 	bl	8001070 <HAL_Delay>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <encoder_init>:


void encoder_init(as5047p_init_t *init)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	init->write_reg = spi_write;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <encoder_init+0x28>)
 80004ec:	601a      	str	r2, [r3, #0]
	init->read_reg = spi_read;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <encoder_init+0x2c>)
 80004f2:	605a      	str	r2, [r3, #4]
	init->delay = delay;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a06      	ldr	r2, [pc, #24]	; (8000510 <encoder_init+0x30>)
 80004f8:	609a      	str	r2, [r3, #8]

}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	08000401 	.word	0x08000401
 800050c:	0800046d 	.word	0x0800046d
 8000510:	080004d1 	.word	0x080004d1

08000514 <readHallPosition>:
static void MX_TIM1_Init(void);
static void MX_TIM15_Init(void);
static void MX_SPI3_Init(void);
/* USER CODE BEGIN PFP */

int8_t readHallPosition(){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	/*	0b0000 0uvw	*/

	Poss positionx = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
	 u_state = HAL_GPIO_ReadPin(GPIOC, HALL_PIN_U);
 800051e:	2120      	movs	r1, #32
 8000520:	4844      	ldr	r0, [pc, #272]	; (8000634 <readHallPosition+0x120>)
 8000522:	f001 f82d 	bl	8001580 <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	b25a      	sxtb	r2, r3
 800052a:	4b43      	ldr	r3, [pc, #268]	; (8000638 <readHallPosition+0x124>)
 800052c:	701a      	strb	r2, [r3, #0]
	 v_state = HAL_GPIO_ReadPin(GPIOC, HALL_PIN_V);
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	4840      	ldr	r0, [pc, #256]	; (8000634 <readHallPosition+0x120>)
 8000532:	f001 f825 	bl	8001580 <HAL_GPIO_ReadPin>
 8000536:	4603      	mov	r3, r0
 8000538:	b25a      	sxtb	r2, r3
 800053a:	4b40      	ldr	r3, [pc, #256]	; (800063c <readHallPosition+0x128>)
 800053c:	701a      	strb	r2, [r3, #0]
	 w_state = HAL_GPIO_ReadPin(GPIOC, HALL_PIN_W);
 800053e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000542:	483c      	ldr	r0, [pc, #240]	; (8000634 <readHallPosition+0x120>)
 8000544:	f001 f81c 	bl	8001580 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	b25a      	sxtb	r2, r3
 800054c:	4b3c      	ldr	r3, [pc, #240]	; (8000640 <readHallPosition+0x12c>)
 800054e:	701a      	strb	r2, [r3, #0]

	if((u_state == 1) && (v_state == 0) && (w_state == 1)){
 8000550:	4b39      	ldr	r3, [pc, #228]	; (8000638 <readHallPosition+0x124>)
 8000552:	f993 3000 	ldrsb.w	r3, [r3]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d10c      	bne.n	8000574 <readHallPosition+0x60>
 800055a:	4b38      	ldr	r3, [pc, #224]	; (800063c <readHallPosition+0x128>)
 800055c:	f993 3000 	ldrsb.w	r3, [r3]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d107      	bne.n	8000574 <readHallPosition+0x60>
 8000564:	4b36      	ldr	r3, [pc, #216]	; (8000640 <readHallPosition+0x12c>)
 8000566:	f993 3000 	ldrsb.w	r3, [r3]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d102      	bne.n	8000574 <readHallPosition+0x60>
		positionx = pos1;
 800056e:	2305      	movs	r3, #5
 8000570:	71fb      	strb	r3, [r7, #7]
 8000572:	e058      	b.n	8000626 <readHallPosition+0x112>
	}
	else if((u_state == 1) && (v_state == 0) && (w_state == 0)){
 8000574:	4b30      	ldr	r3, [pc, #192]	; (8000638 <readHallPosition+0x124>)
 8000576:	f993 3000 	ldrsb.w	r3, [r3]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d10c      	bne.n	8000598 <readHallPosition+0x84>
 800057e:	4b2f      	ldr	r3, [pc, #188]	; (800063c <readHallPosition+0x128>)
 8000580:	f993 3000 	ldrsb.w	r3, [r3]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d107      	bne.n	8000598 <readHallPosition+0x84>
 8000588:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <readHallPosition+0x12c>)
 800058a:	f993 3000 	ldrsb.w	r3, [r3]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d102      	bne.n	8000598 <readHallPosition+0x84>
		positionx = pos2;
 8000592:	2304      	movs	r3, #4
 8000594:	71fb      	strb	r3, [r7, #7]
 8000596:	e046      	b.n	8000626 <readHallPosition+0x112>
	}
	else if((u_state == 1) && (v_state == 1) && (w_state == 0)){
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <readHallPosition+0x124>)
 800059a:	f993 3000 	ldrsb.w	r3, [r3]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d10c      	bne.n	80005bc <readHallPosition+0xa8>
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <readHallPosition+0x128>)
 80005a4:	f993 3000 	ldrsb.w	r3, [r3]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d107      	bne.n	80005bc <readHallPosition+0xa8>
 80005ac:	4b24      	ldr	r3, [pc, #144]	; (8000640 <readHallPosition+0x12c>)
 80005ae:	f993 3000 	ldrsb.w	r3, [r3]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d102      	bne.n	80005bc <readHallPosition+0xa8>
		positionx = pos3;
 80005b6:	2303      	movs	r3, #3
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	e034      	b.n	8000626 <readHallPosition+0x112>
	}
	else if((u_state == 0) && (v_state == 1) && (w_state == 0)){
 80005bc:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <readHallPosition+0x124>)
 80005be:	f993 3000 	ldrsb.w	r3, [r3]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d10c      	bne.n	80005e0 <readHallPosition+0xcc>
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <readHallPosition+0x128>)
 80005c8:	f993 3000 	ldrsb.w	r3, [r3]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d107      	bne.n	80005e0 <readHallPosition+0xcc>
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <readHallPosition+0x12c>)
 80005d2:	f993 3000 	ldrsb.w	r3, [r3]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d102      	bne.n	80005e0 <readHallPosition+0xcc>
		positionx = pos4;
 80005da:	2302      	movs	r3, #2
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	e022      	b.n	8000626 <readHallPosition+0x112>
	}else if((u_state == 0) && (v_state == 1) && (w_state == 1)){
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <readHallPosition+0x124>)
 80005e2:	f993 3000 	ldrsb.w	r3, [r3]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d10c      	bne.n	8000604 <readHallPosition+0xf0>
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <readHallPosition+0x128>)
 80005ec:	f993 3000 	ldrsb.w	r3, [r3]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d107      	bne.n	8000604 <readHallPosition+0xf0>
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <readHallPosition+0x12c>)
 80005f6:	f993 3000 	ldrsb.w	r3, [r3]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d102      	bne.n	8000604 <readHallPosition+0xf0>
		positionx = pos5;
 80005fe:	2301      	movs	r3, #1
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	e010      	b.n	8000626 <readHallPosition+0x112>
	}else if((u_state == 0) && (v_state == 0) && (w_state == 1)){
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <readHallPosition+0x124>)
 8000606:	f993 3000 	ldrsb.w	r3, [r3]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d10b      	bne.n	8000626 <readHallPosition+0x112>
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <readHallPosition+0x128>)
 8000610:	f993 3000 	ldrsb.w	r3, [r3]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d106      	bne.n	8000626 <readHallPosition+0x112>
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <readHallPosition+0x12c>)
 800061a:	f993 3000 	ldrsb.w	r3, [r3]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d101      	bne.n	8000626 <readHallPosition+0x112>
		positionx = pos6;
 8000622:	2300      	movs	r3, #0
 8000624:	71fb      	strb	r3, [r7, #7]
	}


	return positionx;
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	48000800 	.word	0x48000800
 8000638:	20000125 	.word	0x20000125
 800063c:	20000126 	.word	0x20000126
 8000640:	20000127 	.word	0x20000127

08000644 <setMotorPosition>:

void setMotorPosition(int8_t pos){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]

if(pos == pos1)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	2b05      	cmp	r3, #5
 8000654:	d10e      	bne.n	8000674 <setMotorPosition+0x30>
{
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,MIN); //2-4
 8000656:	4b42      	ldr	r3, [pc, #264]	; (8000760 <setMotorPosition+0x11c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2200      	movs	r2, #0
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2,MAX);
 800065e:	4b40      	ldr	r3, [pc, #256]	; (8000760 <setMotorPosition+0x11c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000666:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3,MED);
 8000668:	4b3d      	ldr	r3, [pc, #244]	; (8000760 <setMotorPosition+0x11c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000670:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(1);

}


}
 8000672:	e070      	b.n	8000756 <setMotorPosition+0x112>
else if(pos == pos2){//
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b04      	cmp	r3, #4
 800067a:	d10e      	bne.n	800069a <setMotorPosition+0x56>
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,MIN); // 2-6
 800067c:	4b38      	ldr	r3, [pc, #224]	; (8000760 <setMotorPosition+0x11c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2200      	movs	r2, #0
 8000682:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2,MED);
 8000684:	4b36      	ldr	r3, [pc, #216]	; (8000760 <setMotorPosition+0x11c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f240 12f3 	movw	r2, #499	; 0x1f3
 800068c:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3,MAX);
 800068e:	4b34      	ldr	r3, [pc, #208]	; (8000760 <setMotorPosition+0x11c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000698:	e05d      	b.n	8000756 <setMotorPosition+0x112>
else if(pos == pos3){
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b03      	cmp	r3, #3
 80006a0:	d10e      	bne.n	80006c0 <setMotorPosition+0x7c>
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,MED); //1-6
 80006a2:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <setMotorPosition+0x11c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80006aa:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2,MIN);
 80006ac:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <setMotorPosition+0x11c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2200      	movs	r2, #0
 80006b2:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3,MAX);
 80006b4:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <setMotorPosition+0x11c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80006be:	e04a      	b.n	8000756 <setMotorPosition+0x112>
else if(pos == pos4){
 80006c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d10e      	bne.n	80006e6 <setMotorPosition+0xa2>
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,MAX);//1-5
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <setMotorPosition+0x11c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2,MIN);
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <setMotorPosition+0x11c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3,MED);
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <setMotorPosition+0x11c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f240 12f3 	movw	r2, #499	; 0x1f3
 80006e2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80006e4:	e037      	b.n	8000756 <setMotorPosition+0x112>
else if(pos == pos5){
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d10e      	bne.n	800070c <setMotorPosition+0xc8>
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,MAX);//3-5
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <setMotorPosition+0x11c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2,MED);
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <setMotorPosition+0x11c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000700:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3,MIN);
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <setMotorPosition+0x11c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2200      	movs	r2, #0
 8000708:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800070a:	e024      	b.n	8000756 <setMotorPosition+0x112>
else if(pos == pos6){// 3-4
 800070c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10e      	bne.n	8000732 <setMotorPosition+0xee>
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,MED);
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <setMotorPosition+0x11c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f240 12f3 	movw	r2, #499	; 0x1f3
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2,MAX);
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <setMotorPosition+0x11c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000726:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3,MIN);
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <setMotorPosition+0x11c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000730:	e011      	b.n	8000756 <setMotorPosition+0x112>
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,MED);
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <setMotorPosition+0x11c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f240 12f3 	movw	r2, #499	; 0x1f3
 800073a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2,MED);
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <setMotorPosition+0x11c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000744:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3,MED);
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <setMotorPosition+0x11c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800074e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 fc8d 	bl	8001070 <HAL_Delay>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000008c 	.word	0x2000008c

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f000 fc10 	bl	8000f8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f857 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f000 f9fb 	bl	8000b6c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000776:	f000 f8dd 	bl	8000934 <MX_TIM1_Init>
  MX_TIM15_Init();
 800077a:	f000 f9a5 	bl	8000ac8 <MX_TIM15_Init>
  MX_SPI3_Init();
 800077e:	f000 f89b 	bl	80008b8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000782:	2100      	movs	r1, #0
 8000784:	4823      	ldr	r0, [pc, #140]	; (8000814 <main+0xb0>)
 8000786:	f002 fcab 	bl	80030e0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800078a:	2100      	movs	r1, #0
 800078c:	4821      	ldr	r0, [pc, #132]	; (8000814 <main+0xb0>)
 800078e:	f003 fbfd 	bl	8003f8c <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000792:	2104      	movs	r1, #4
 8000794:	481f      	ldr	r0, [pc, #124]	; (8000814 <main+0xb0>)
 8000796:	f002 fca3 	bl	80030e0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800079a:	2104      	movs	r1, #4
 800079c:	481d      	ldr	r0, [pc, #116]	; (8000814 <main+0xb0>)
 800079e:	f003 fbf5 	bl	8003f8c <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80007a2:	2108      	movs	r1, #8
 80007a4:	481b      	ldr	r0, [pc, #108]	; (8000814 <main+0xb0>)
 80007a6:	f002 fc9b 	bl	80030e0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80007aa:	2108      	movs	r1, #8
 80007ac:	4819      	ldr	r0, [pc, #100]	; (8000814 <main+0xb0>)
 80007ae:	f003 fbed 	bl	8003f8c <HAL_TIMEx_PWMN_Start>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2104      	movs	r1, #4
 80007b6:	4818      	ldr	r0, [pc, #96]	; (8000818 <main+0xb4>)
 80007b8:	f000 fefa 	bl	80015b0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80007bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c0:	f000 fc56 	bl	8001070 <HAL_Delay>
  //encoder_init(&asp);
  //as5047p_config(&asp, 0b00100101, 0x0007);
  //as5047p_setZero(&asp, 1052);

  as5047p_init_t a;
  encoder_init(&a);
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fe8a 	bl	80004e0 <encoder_init>
  as5047p_config(&a, 0x0025, 0x0007);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2207      	movs	r2, #7
 80007d0:	2125      	movs	r1, #37	; 0x25
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fdc9 	bl	800036a <as5047p_config>
  as5047p_setZero(&a, 1052);
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	f240 411c 	movw	r1, #1052	; 0x41c
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fded 	bl	80003be <as5047p_setZero>
  as5047p_readData(&a, AS5047P_SETTINGS1);
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2118      	movs	r1, #24
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fd43 	bl	8000274 <as5047p_readData>
  as5047p_readData(&a, AS5047P_SETTINGS2);
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2119      	movs	r1, #25
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fd3e 	bl	8000274 <as5047p_readData>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 positionx = readHallPosition();
 80007f8:	f7ff fe8c 	bl	8000514 <readHallPosition>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <main+0xb8>)
 8000802:	701a      	strb	r2, [r3, #0]
	 setMotorPosition(positionx);
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <main+0xb8>)
 8000806:	f993 3000 	ldrsb.w	r3, [r3]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff1a 	bl	8000644 <setMotorPosition>
	 positionx = readHallPosition();
 8000810:	e7f2      	b.n	80007f8 <main+0x94>
 8000812:	bf00      	nop
 8000814:	2000008c 	.word	0x2000008c
 8000818:	48000c00 	.word	0x48000c00
 800081c:	20000124 	.word	0x20000124

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0318 	add.w	r3, r7, #24
 800082a:	2238      	movs	r2, #56	; 0x38
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fda7 	bl	8004382 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fecc 	bl	80015e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000848:	2302      	movs	r3, #2
 800084a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000852:	2340      	movs	r3, #64	; 0x40
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800085a:	2302      	movs	r3, #2
 800085c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800085e:	2304      	movs	r3, #4
 8000860:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000862:	2355      	movs	r3, #85	; 0x55
 8000864:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000866:	2302      	movs	r3, #2
 8000868:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800086a:	2302      	movs	r3, #2
 800086c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800086e:	2302      	movs	r3, #2
 8000870:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 0318 	add.w	r3, r7, #24
 8000876:	4618      	mov	r0, r3
 8000878:	f000 ff66 	bl	8001748 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000882:	f000 fa15 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2303      	movs	r3, #3
 800088c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2104      	movs	r1, #4
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 fa6a 	bl	8001d78 <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008aa:	f000 fa01 	bl	8000cb0 <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	3750      	adds	r7, #80	; 0x50
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_SPI3_Init+0x74>)
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_SPI3_Init+0x78>)
 80008c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_SPI3_Init+0x74>)
 80008c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_SPI3_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_SPI3_Init+0x74>)
 80008d2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80008d6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_SPI3_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_SPI3_Init+0x74>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_SPI3_Init+0x74>)
 80008e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_SPI3_Init+0x74>)
 80008ee:	2230      	movs	r2, #48	; 0x30
 80008f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_SPI3_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_SPI3_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_SPI3_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_SPI3_Init+0x74>)
 8000906:	220a      	movs	r2, #10
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_SPI3_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_SPI3_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_SPI3_Init+0x74>)
 8000918:	f001 fc12 	bl	8002140 <HAL_SPI_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000922:	f000 f9c5 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000028 	.word	0x20000028
 8000930:	40003c00 	.word	0x40003c00

08000934 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b09c      	sub	sp, #112	; 0x70
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000954:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
 8000964:	615a      	str	r2, [r3, #20]
 8000966:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2234      	movs	r2, #52	; 0x34
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fd07 	bl	8004382 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000974:	4b52      	ldr	r3, [pc, #328]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 8000976:	4a53      	ldr	r2, [pc, #332]	; (8000ac4 <MX_TIM1_Init+0x190>)
 8000978:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 800097a:	4b51      	ldr	r3, [pc, #324]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 800097c:	2210      	movs	r2, #16
 800097e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b4f      	ldr	r3, [pc, #316]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000986:	4b4e      	ldr	r3, [pc, #312]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 8000988:	f240 32e7 	movw	r2, #999	; 0x3e7
 800098c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098e:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000994:	4b4a      	ldr	r3, [pc, #296]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099a:	4b49      	ldr	r3, [pc, #292]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009a0:	4847      	ldr	r0, [pc, #284]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 80009a2:	f002 fae5 	bl	8002f70 <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009ac:	f000 f980 	bl	8000cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009ba:	4619      	mov	r1, r3
 80009bc:	4840      	ldr	r0, [pc, #256]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 80009be:	f002 fda3 	bl	8003508 <HAL_TIM_ConfigClockSource>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009c8:	f000 f972 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009cc:	483c      	ldr	r0, [pc, #240]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 80009ce:	f002 fb26 	bl	800301e <HAL_TIM_PWM_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009d8:	f000 f96a 	bl	8000cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009ec:	4619      	mov	r1, r3
 80009ee:	4834      	ldr	r0, [pc, #208]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 80009f0:	f003 fb80 	bl	80040f4 <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009fa:	f000 f959 	bl	8000cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fe:	2360      	movs	r3, #96	; 0x60
 8000a00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 49;
 8000a02:	2331      	movs	r3, #49	; 0x31
 8000a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a06:	2300      	movs	r3, #0
 8000a08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a1a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	4826      	ldr	r0, [pc, #152]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 8000a26:	f002 fc5b 	bl	80032e0 <HAL_TIM_PWM_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000a30:	f000 f93e 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a38:	2204      	movs	r2, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4820      	ldr	r0, [pc, #128]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 8000a3e:	f002 fc4f 	bl	80032e0 <HAL_TIM_PWM_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000a48:	f000 f932 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a50:	2208      	movs	r2, #8
 8000a52:	4619      	mov	r1, r3
 8000a54:	481a      	ldr	r0, [pc, #104]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 8000a56:	f002 fc43 	bl	80032e0 <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000a60:	f000 f926 	bl	8000cb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 8000aa2:	f003 fba9 	bl	80041f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8000aac:	f000 f900 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ab0:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <MX_TIM1_Init+0x18c>)
 8000ab2:	f000 f99f 	bl	8000df4 <HAL_TIM_MspPostInit>

}
 8000ab6:	bf00      	nop
 8000ab8:	3770      	adds	r7, #112	; 0x70
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000008c 	.word	0x2000008c
 8000ac4:	40012c00 	.word	0x40012c00

08000ac8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <MX_TIM15_Init+0x9c>)
 8000ae8:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <MX_TIM15_Init+0xa0>)
 8000aea:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 699;
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <MX_TIM15_Init+0x9c>)
 8000aee:	f240 22bb 	movw	r2, #699	; 0x2bb
 8000af2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_TIM15_Init+0x9c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_TIM15_Init+0x9c>)
 8000afc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b00:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_TIM15_Init+0x9c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_TIM15_Init+0x9c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_TIM15_Init+0x9c>)
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000b14:	4813      	ldr	r0, [pc, #76]	; (8000b64 <MX_TIM15_Init+0x9c>)
 8000b16:	f002 fa2b 	bl	8002f70 <HAL_TIM_Base_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8000b20:	f000 f8c6 	bl	8000cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <MX_TIM15_Init+0x9c>)
 8000b32:	f002 fce9 	bl	8003508 <HAL_TIM_ConfigClockSource>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000b3c:	f000 f8b8 	bl	8000cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_TIM15_Init+0x9c>)
 8000b4e:	f003 fad1 	bl	80040f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000b58:	f000 f8aa 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	3720      	adds	r7, #32
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200000d8 	.word	0x200000d8
 8000b68:	40014000 	.word	0x40014000

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	4b48      	ldr	r3, [pc, #288]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4a47      	ldr	r2, [pc, #284]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4b45      	ldr	r3, [pc, #276]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b9a:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a41      	ldr	r2, [pc, #260]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000ba0:	f043 0320 	orr.w	r3, r3, #32
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0320 	and.w	r3, r3, #32
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a3b      	ldr	r2, [pc, #236]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a35      	ldr	r2, [pc, #212]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	4a2f      	ldr	r2, [pc, #188]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	482a      	ldr	r0, [pc, #168]	; (8000ca8 <MX_GPIO_Init+0x13c>)
 8000c00:	f000 fcd6 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4824      	ldr	r0, [pc, #144]	; (8000cac <MX_GPIO_Init+0x140>)
 8000c1c:	f000 fb2e 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 8000c20:	2308      	movs	r3, #8
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c30:	230c      	movs	r3, #12
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3e:	f000 fb1d 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c42:	23e0      	movs	r3, #224	; 0xe0
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c52:	2305      	movs	r3, #5
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f000 fb0c 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000c64:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <MX_GPIO_Init+0x140>)
 8000c7a:	f000 faff 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_GPIO_Init+0x13c>)
 8000c96:	f000 faf1 	bl	800127c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48000c00 	.word	0x48000c00
 8000cac:	48000800 	.word	0x48000800

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cf2:	f000 fd19 	bl	8001728 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <HAL_SPI_MspInit+0x7c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d128      	bne.n	8000d78 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d30:	6593      	str	r3, [r2, #88]	; 0x58
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d56:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d68:	2306      	movs	r3, #6
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_SPI_MspInit+0x84>)
 8000d74:	f000 fa82 	bl	800127c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	; 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40003c00 	.word	0x40003c00
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48000800 	.word	0x48000800

08000d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <HAL_TIM_Base_MspInit+0x5c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d10c      	bne.n	8000db8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <HAL_TIM_Base_MspInit+0x60>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <HAL_TIM_Base_MspInit+0x60>)
 8000da4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000da8:	6613      	str	r3, [r2, #96]	; 0x60
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_TIM_Base_MspInit+0x60>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000db6:	e010      	b.n	8000dda <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM15)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0c      	ldr	r2, [pc, #48]	; (8000df0 <HAL_TIM_Base_MspInit+0x64>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d10b      	bne.n	8000dda <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_TIM_Base_MspInit+0x60>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc6:	4a09      	ldr	r2, [pc, #36]	; (8000dec <HAL_TIM_Base_MspInit+0x60>)
 8000dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dcc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <HAL_TIM_Base_MspInit+0x60>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40012c00 	.word	0x40012c00
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40014000 	.word	0x40014000

08000df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a29      	ldr	r2, [pc, #164]	; (8000eb8 <HAL_TIM_MspPostInit+0xc4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d14b      	bne.n	8000eae <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <HAL_TIM_MspPostInit+0xc8>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a28      	ldr	r2, [pc, #160]	; (8000ebc <HAL_TIM_MspPostInit+0xc8>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <HAL_TIM_MspPostInit+0xc8>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <HAL_TIM_MspPostInit+0xc8>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <HAL_TIM_MspPostInit+0xc8>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <HAL_TIM_MspPostInit+0xc8>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000e46:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e58:	2306      	movs	r3, #6
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4817      	ldr	r0, [pc, #92]	; (8000ec0 <HAL_TIM_MspPostInit+0xcc>)
 8000e64:	f000 fa0a 	bl	800127c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <HAL_TIM_MspPostInit+0xcc>)
 8000e86:	f000 f9f9 	bl	800127c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000e8a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e9c:	2306      	movs	r3, #6
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f000 f9e7 	bl	800127c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40012c00 	.word	0x40012c00
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	48000400 	.word	0x48000400

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f890 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopForever+0xe>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopForever+0x16>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f66:	f7ff ffd7 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f003 fa13 	bl	8004394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f6e:	f7ff fbf9 	bl	8000764 <main>

08000f72 <LoopForever>:

LoopForever:
    b LoopForever
 8000f72:	e7fe      	b.n	8000f72 <LoopForever>
  ldr   r0, =_estack
 8000f74:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f80:	0800440c 	.word	0x0800440c
  ldr r2, =_sbss
 8000f84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f88:	2000012c 	.word	0x2000012c

08000f8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC1_2_IRQHandler>

08000f8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 f93d 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 f80e 	bl	8000fc0 <HAL_InitTick>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	e001      	b.n	8000fb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb0:	f7ff fe84 	bl	8000cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb4:	79fb      	ldrb	r3, [r7, #7]

}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <HAL_InitTick+0x68>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d022      	beq.n	800101a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_InitTick+0x6c>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <HAL_InitTick+0x68>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fe0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f93a 	bl	8001262 <HAL_SYSTICK_Config>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10f      	bne.n	8001014 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	d809      	bhi.n	800100e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001002:	f000 f914 	bl	800122e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_InitTick+0x70>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	e007      	b.n	800101e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e004      	b.n	800101e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e001      	b.n	800101e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000008 	.word	0x20000008
 800102c:	20000000 	.word	0x20000000
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_IncTick+0x1c>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_IncTick+0x20>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4413      	add	r3, r2
 8001042:	4a03      	ldr	r2, [pc, #12]	; (8001050 <HAL_IncTick+0x1c>)
 8001044:	6013      	str	r3, [r2, #0]
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	20000128 	.word	0x20000128
 8001054:	20000008 	.word	0x20000008

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000128 	.word	0x20000128

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff ffee 	bl	8001058 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001088:	d004      	beq.n	8001094 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_Delay+0x40>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001094:	bf00      	nop
 8001096:	f7ff ffdf 	bl	8001058 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d8f7      	bhi.n	8001096 <HAL_Delay+0x26>
  {
  }
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000008 	.word	0x20000008

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e4:	d301      	bcc.n	80011ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00f      	b.n	800120a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <SysTick_Config+0x40>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f2:	210f      	movs	r1, #15
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f8:	f7ff ff8e 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SysTick_Config+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SysTick_Config+0x40>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff47 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff5e 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff90 	bl	800116c <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5f 	bl	8001118 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffb2 	bl	80011d4 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800128a:	e15a      	b.n	8001542 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 814c 	beq.w	800153c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d005      	beq.n	80012bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d130      	bne.n	800131e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f2:	2201      	movs	r2, #1
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	f003 0201 	and.w	r2, r3, #1
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b03      	cmp	r3, #3
 8001328:	d017      	beq.n	800135a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d123      	bne.n	80013ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	6939      	ldr	r1, [r7, #16]
 80013aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0203 	and.w	r2, r3, #3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 80a6 	beq.w	800153c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f0:	4b5b      	ldr	r3, [pc, #364]	; (8001560 <HAL_GPIO_Init+0x2e4>)
 80013f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f4:	4a5a      	ldr	r2, [pc, #360]	; (8001560 <HAL_GPIO_Init+0x2e4>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6613      	str	r3, [r2, #96]	; 0x60
 80013fc:	4b58      	ldr	r3, [pc, #352]	; (8001560 <HAL_GPIO_Init+0x2e4>)
 80013fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001408:	4a56      	ldr	r2, [pc, #344]	; (8001564 <HAL_GPIO_Init+0x2e8>)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001432:	d01f      	beq.n	8001474 <HAL_GPIO_Init+0x1f8>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <HAL_GPIO_Init+0x2ec>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d019      	beq.n	8001470 <HAL_GPIO_Init+0x1f4>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a4b      	ldr	r2, [pc, #300]	; (800156c <HAL_GPIO_Init+0x2f0>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d013      	beq.n	800146c <HAL_GPIO_Init+0x1f0>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a4a      	ldr	r2, [pc, #296]	; (8001570 <HAL_GPIO_Init+0x2f4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d00d      	beq.n	8001468 <HAL_GPIO_Init+0x1ec>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a49      	ldr	r2, [pc, #292]	; (8001574 <HAL_GPIO_Init+0x2f8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d007      	beq.n	8001464 <HAL_GPIO_Init+0x1e8>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a48      	ldr	r2, [pc, #288]	; (8001578 <HAL_GPIO_Init+0x2fc>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_GPIO_Init+0x1e4>
 800145c:	2305      	movs	r3, #5
 800145e:	e00a      	b.n	8001476 <HAL_GPIO_Init+0x1fa>
 8001460:	2306      	movs	r3, #6
 8001462:	e008      	b.n	8001476 <HAL_GPIO_Init+0x1fa>
 8001464:	2304      	movs	r3, #4
 8001466:	e006      	b.n	8001476 <HAL_GPIO_Init+0x1fa>
 8001468:	2303      	movs	r3, #3
 800146a:	e004      	b.n	8001476 <HAL_GPIO_Init+0x1fa>
 800146c:	2302      	movs	r3, #2
 800146e:	e002      	b.n	8001476 <HAL_GPIO_Init+0x1fa>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_GPIO_Init+0x1fa>
 8001474:	2300      	movs	r3, #0
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	f002 0203 	and.w	r2, r2, #3
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	4093      	lsls	r3, r2
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001486:	4937      	ldr	r1, [pc, #220]	; (8001564 <HAL_GPIO_Init+0x2e8>)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <HAL_GPIO_Init+0x300>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014b8:	4a30      	ldr	r2, [pc, #192]	; (800157c <HAL_GPIO_Init+0x300>)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014be:	4b2f      	ldr	r3, [pc, #188]	; (800157c <HAL_GPIO_Init+0x300>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014e2:	4a26      	ldr	r2, [pc, #152]	; (800157c <HAL_GPIO_Init+0x300>)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_GPIO_Init+0x300>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800150c:	4a1b      	ldr	r2, [pc, #108]	; (800157c <HAL_GPIO_Init+0x300>)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_GPIO_Init+0x300>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001536:	4a11      	ldr	r2, [pc, #68]	; (800157c <HAL_GPIO_Init+0x300>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3301      	adds	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fa22 f303 	lsr.w	r3, r2, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	f47f ae9d 	bne.w	800128c <HAL_GPIO_Init+0x10>
  }
}
 8001552:	bf00      	nop
 8001554:	bf00      	nop
 8001556:	371c      	adds	r7, #28
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000
 8001568:	48000400 	.word	0x48000400
 800156c:	48000800 	.word	0x48000800
 8001570:	48000c00 	.word	0x48000c00
 8001574:	48001000 	.word	0x48001000
 8001578:	48001400 	.word	0x48001400
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e001      	b.n	80015a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
 80015bc:	4613      	mov	r3, r2
 80015be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c0:	787b      	ldrb	r3, [r7, #1]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d141      	bne.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ee:	4b4b      	ldr	r3, [pc, #300]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015fa:	d131      	bne.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015fc:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001602:	4a46      	ldr	r2, [pc, #280]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001608:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800160c:	4b43      	ldr	r3, [pc, #268]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001614:	4a41      	ldr	r2, [pc, #260]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800161c:	4b40      	ldr	r3, [pc, #256]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2232      	movs	r2, #50	; 0x32
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	4a3f      	ldr	r2, [pc, #252]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	0c9b      	lsrs	r3, r3, #18
 800162e:	3301      	adds	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001632:	e002      	b.n	800163a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3b01      	subs	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001646:	d102      	bne.n	800164e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f2      	bne.n	8001634 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800164e:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165a:	d158      	bne.n	800170e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e057      	b.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001660:	4b2e      	ldr	r3, [pc, #184]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001666:	4a2d      	ldr	r2, [pc, #180]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800166c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001670:	e04d      	b.n	800170e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001678:	d141      	bne.n	80016fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800167a:	4b28      	ldr	r3, [pc, #160]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001686:	d131      	bne.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800168e:	4a23      	ldr	r2, [pc, #140]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a0:	4a1e      	ldr	r2, [pc, #120]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2232      	movs	r2, #50	; 0x32
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016b4:	fba2 2303 	umull	r2, r3, r2, r3
 80016b8:	0c9b      	lsrs	r3, r3, #18
 80016ba:	3301      	adds	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016be:	e002      	b.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d102      	bne.n	80016da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f2      	bne.n	80016c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e6:	d112      	bne.n	800170e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e011      	b.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016fc:	e007      	b.n	800170e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001708:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40007000 	.word	0x40007000
 8001720:	20000000 	.word	0x20000000
 8001724:	431bde83 	.word	0x431bde83

08001728 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001736:	6093      	str	r3, [r2, #8]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40007000 	.word	0x40007000

08001748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e306      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d075      	beq.n	8001852 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001766:	4b97      	ldr	r3, [pc, #604]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001770:	4b94      	ldr	r3, [pc, #592]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2b0c      	cmp	r3, #12
 800177e:	d102      	bne.n	8001786 <HAL_RCC_OscConfig+0x3e>
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2b03      	cmp	r3, #3
 8001784:	d002      	beq.n	800178c <HAL_RCC_OscConfig+0x44>
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b08      	cmp	r3, #8
 800178a:	d10b      	bne.n	80017a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	4b8d      	ldr	r3, [pc, #564]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d05b      	beq.n	8001850 <HAL_RCC_OscConfig+0x108>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d157      	bne.n	8001850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e2e1      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ac:	d106      	bne.n	80017bc <HAL_RCC_OscConfig+0x74>
 80017ae:	4b85      	ldr	r3, [pc, #532]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a84      	ldr	r2, [pc, #528]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e01d      	b.n	80017f8 <HAL_RCC_OscConfig+0xb0>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x98>
 80017c6:	4b7f      	ldr	r3, [pc, #508]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a7e      	ldr	r2, [pc, #504]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80017cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b7c      	ldr	r3, [pc, #496]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a7b      	ldr	r2, [pc, #492]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80017d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e00b      	b.n	80017f8 <HAL_RCC_OscConfig+0xb0>
 80017e0:	4b78      	ldr	r3, [pc, #480]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a77      	ldr	r2, [pc, #476]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b75      	ldr	r3, [pc, #468]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a74      	ldr	r2, [pc, #464]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80017f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fc2a 	bl	8001058 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fc26 	bl	8001058 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e2a6      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181a:	4b6a      	ldr	r3, [pc, #424]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0xc0>
 8001826:	e014      	b.n	8001852 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fc16 	bl	8001058 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fc12 	bl	8001058 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e292      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001842:	4b60      	ldr	r3, [pc, #384]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0xe8>
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d075      	beq.n	800194a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185e:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001868:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b0c      	cmp	r3, #12
 8001876:	d102      	bne.n	800187e <HAL_RCC_OscConfig+0x136>
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d002      	beq.n	8001884 <HAL_RCC_OscConfig+0x13c>
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b04      	cmp	r3, #4
 8001882:	d11f      	bne.n	80018c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001884:	4b4f      	ldr	r3, [pc, #316]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_OscConfig+0x154>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e265      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b49      	ldr	r3, [pc, #292]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	061b      	lsls	r3, r3, #24
 80018aa:	4946      	ldr	r1, [pc, #280]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018b0:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <HAL_RCC_OscConfig+0x280>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fb83 	bl	8000fc0 <HAL_InitTick>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d043      	beq.n	8001948 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e251      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d023      	beq.n	8001914 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018cc:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a3c      	ldr	r2, [pc, #240]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80018d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fbbe 	bl	8001058 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff fbba 	bl	8001058 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e23a      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f2:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	061b      	lsls	r3, r3, #24
 800190c:	492d      	ldr	r1, [pc, #180]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
 8001912:	e01a      	b.n	800194a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001914:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2a      	ldr	r2, [pc, #168]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 800191a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fb9a 	bl	8001058 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff fb96 	bl	8001058 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e216      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800193a:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x1e0>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001948:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d041      	beq.n	80019da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d01c      	beq.n	8001998 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 8001960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001964:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196e:	f7ff fb73 	bl	8001058 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001976:	f7ff fb6f 	bl	8001058 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e1ef      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 800198a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0ef      	beq.n	8001976 <HAL_RCC_OscConfig+0x22e>
 8001996:	e020      	b.n	80019da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff fb56 	bl	8001058 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019ae:	e00d      	b.n	80019cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff fb52 	bl	8001058 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d906      	bls.n	80019cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e1d2      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019cc:	4b8c      	ldr	r3, [pc, #560]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 80019ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1ea      	bne.n	80019b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 80a6 	beq.w	8001b34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e8:	2300      	movs	r3, #0
 80019ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019ec:	4b84      	ldr	r3, [pc, #528]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_OscConfig+0x2b4>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <HAL_RCC_OscConfig+0x2b6>
 80019fc:	2300      	movs	r3, #0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00d      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	4b7f      	ldr	r3, [pc, #508]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	4a7e      	ldr	r2, [pc, #504]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0e:	4b7c      	ldr	r3, [pc, #496]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1e:	4b79      	ldr	r3, [pc, #484]	; (8001c04 <HAL_RCC_OscConfig+0x4bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a2a:	4b76      	ldr	r3, [pc, #472]	; (8001c04 <HAL_RCC_OscConfig+0x4bc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a75      	ldr	r2, [pc, #468]	; (8001c04 <HAL_RCC_OscConfig+0x4bc>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fb0f 	bl	8001058 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7ff fb0b 	bl	8001058 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e18b      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a50:	4b6c      	ldr	r3, [pc, #432]	; (8001c04 <HAL_RCC_OscConfig+0x4bc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d108      	bne.n	8001a76 <HAL_RCC_OscConfig+0x32e>
 8001a64:	4b66      	ldr	r3, [pc, #408]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6a:	4a65      	ldr	r2, [pc, #404]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a74:	e024      	b.n	8001ac0 <HAL_RCC_OscConfig+0x378>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	d110      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x358>
 8001a7e:	4b60      	ldr	r3, [pc, #384]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a84:	4a5e      	ldr	r2, [pc, #376]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a8e:	4b5c      	ldr	r3, [pc, #368]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a94:	4a5a      	ldr	r2, [pc, #360]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a9e:	e00f      	b.n	8001ac0 <HAL_RCC_OscConfig+0x378>
 8001aa0:	4b57      	ldr	r3, [pc, #348]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	4a56      	ldr	r2, [pc, #344]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab0:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab6:	4a52      	ldr	r2, [pc, #328]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d016      	beq.n	8001af6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fac6 	bl	8001058 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fac2 	bl	8001058 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e140      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae6:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0ed      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x388>
 8001af4:	e015      	b.n	8001b22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af6:	f7ff faaf 	bl	8001058 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7ff faab 	bl	8001058 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e129      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b14:	4b3a      	ldr	r3, [pc, #232]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1ed      	bne.n	8001afe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b22:	7ffb      	ldrb	r3, [r7, #31]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d105      	bne.n	8001b34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b28:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	4a34      	ldr	r2, [pc, #208]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d03c      	beq.n	8001bba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d01c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b48:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b4e:	4a2c      	ldr	r2, [pc, #176]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7ff fa7e 	bl	8001058 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b60:	f7ff fa7a 	bl	8001058 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e0fa      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b72:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001b74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0ef      	beq.n	8001b60 <HAL_RCC_OscConfig+0x418>
 8001b80:	e01b      	b.n	8001bba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b82:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b88:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b92:	f7ff fa61 	bl	8001058 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b9a:	f7ff fa5d 	bl	8001058 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e0dd      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bac:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1ef      	bne.n	8001b9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80d1 	beq.w	8001d66 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b0c      	cmp	r3, #12
 8001bce:	f000 808b 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d15e      	bne.n	8001c98 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <HAL_RCC_OscConfig+0x4b8>)
 8001be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be6:	f7ff fa37 	bl	8001058 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bec:	e00c      	b.n	8001c08 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bee:	f7ff fa33 	bl	8001058 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d905      	bls.n	8001c08 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e0b3      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c08:	4b59      	ldr	r3, [pc, #356]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1ec      	bne.n	8001bee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c14:	4b56      	ldr	r3, [pc, #344]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	4b56      	ldr	r3, [pc, #344]	; (8001d74 <HAL_RCC_OscConfig+0x62c>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6a11      	ldr	r1, [r2, #32]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c24:	3a01      	subs	r2, #1
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c2e:	0212      	lsls	r2, r2, #8
 8001c30:	4311      	orrs	r1, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c36:	0852      	lsrs	r2, r2, #1
 8001c38:	3a01      	subs	r2, #1
 8001c3a:	0552      	lsls	r2, r2, #21
 8001c3c:	4311      	orrs	r1, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c42:	0852      	lsrs	r2, r2, #1
 8001c44:	3a01      	subs	r2, #1
 8001c46:	0652      	lsls	r2, r2, #25
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c4e:	06d2      	lsls	r2, r2, #27
 8001c50:	430a      	orrs	r2, r1
 8001c52:	4947      	ldr	r1, [pc, #284]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c58:	4b45      	ldr	r3, [pc, #276]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a44      	ldr	r2, [pc, #272]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c62:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c64:	4b42      	ldr	r3, [pc, #264]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4a41      	ldr	r2, [pc, #260]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff f9f2 	bl	8001058 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c78:	f7ff f9ee 	bl	8001058 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e06e      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8a:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x530>
 8001c96:	e066      	b.n	8001d66 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c98:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a34      	ldr	r2, [pc, #208]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ca4:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4a31      	ldr	r2, [pc, #196]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001caa:	f023 0303 	bic.w	r3, r3, #3
 8001cae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001cb0:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4a2e      	ldr	r2, [pc, #184]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001cb6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f9ca 	bl	8001058 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff f9c6 	bl	8001058 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e046      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cda:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x580>
 8001ce6:	e03e      	b.n	8001d66 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e039      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001cf4:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <HAL_RCC_OscConfig+0x628>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d12c      	bne.n	8001d62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	3b01      	subs	r3, #1
 8001d14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d123      	bne.n	8001d62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d11b      	bne.n	8001d62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d113      	bne.n	8001d62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	085b      	lsrs	r3, r3, #1
 8001d46:	3b01      	subs	r3, #1
 8001d48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d109      	bne.n	8001d62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d58:	085b      	lsrs	r3, r3, #1
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	019f800c 	.word	0x019f800c

08001d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e11e      	b.n	8001fce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b91      	ldr	r3, [pc, #580]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d910      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b8e      	ldr	r3, [pc, #568]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 020f 	bic.w	r2, r3, #15
 8001da6:	498c      	ldr	r1, [pc, #560]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b8a      	ldr	r3, [pc, #552]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e106      	b.n	8001fce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d073      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d129      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd4:	4b81      	ldr	r3, [pc, #516]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0f4      	b.n	8001fce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001de4:	f000 f966 	bl	80020b4 <RCC_GetSysClockFreqFromPLLSource>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4a7c      	ldr	r2, [pc, #496]	; (8001fe0 <HAL_RCC_ClockConfig+0x268>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d93f      	bls.n	8001e72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001df2:	4b7a      	ldr	r3, [pc, #488]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d033      	beq.n	8001e72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d12f      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e12:	4b72      	ldr	r3, [pc, #456]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e1a:	4a70      	ldr	r2, [pc, #448]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	e024      	b.n	8001e72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e30:	4b6a      	ldr	r3, [pc, #424]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0c6      	b.n	8001fce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0be      	b.n	8001fce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e50:	f000 f8ce 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4a61      	ldr	r2, [pc, #388]	; (8001fe0 <HAL_RCC_ClockConfig+0x268>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d909      	bls.n	8001e72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e5e:	4b5f      	ldr	r3, [pc, #380]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e66:	4a5d      	ldr	r2, [pc, #372]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e72:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f023 0203 	bic.w	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4957      	ldr	r1, [pc, #348]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e84:	f7ff f8e8 	bl	8001058 <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8c:	f7ff f8e4 	bl	8001058 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e095      	b.n	8001fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	4b4e      	ldr	r3, [pc, #312]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 020c 	and.w	r2, r3, #12
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d1eb      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d023      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ecc:	4b43      	ldr	r3, [pc, #268]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a42      	ldr	r2, [pc, #264]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001ed2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ed6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ee4:	4b3d      	ldr	r3, [pc, #244]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001eec:	4a3b      	ldr	r2, [pc, #236]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001eee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ef2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4936      	ldr	r1, [pc, #216]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b80      	cmp	r3, #128	; 0x80
 8001f0c:	d105      	bne.n	8001f1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	4a32      	ldr	r2, [pc, #200]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f1a:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d21d      	bcs.n	8001f64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 020f 	bic.w	r2, r3, #15
 8001f30:	4929      	ldr	r1, [pc, #164]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f38:	f7ff f88e 	bl	8001058 <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f40:	f7ff f88a 	bl	8001058 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e03b      	b.n	8001fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d1ed      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4917      	ldr	r1, [pc, #92]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	490f      	ldr	r1, [pc, #60]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fa2:	f000 f825 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	490c      	ldr	r1, [pc, #48]	; (8001fe4 <HAL_RCC_ClockConfig+0x26c>)
 8001fb4:	5ccb      	ldrb	r3, [r1, r3]
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_RCC_ClockConfig+0x270>)
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_RCC_ClockConfig+0x274>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fffa 	bl	8000fc0 <HAL_InitTick>
 8001fcc:	4603      	mov	r3, r0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	04c4b400 	.word	0x04c4b400
 8001fe4:	080043f4 	.word	0x080043f4
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ff6:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d102      	bne.n	8002008 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002002:	4b2a      	ldr	r3, [pc, #168]	; (80020ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	e047      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002008:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d102      	bne.n	800201a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002014:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	e03e      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d136      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3301      	adds	r3, #1
 800203c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d10c      	bne.n	800205e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002044:	4a1a      	ldr	r2, [pc, #104]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	fbb2 f3f3 	udiv	r3, r2, r3
 800204c:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800204e:	68d2      	ldr	r2, [r2, #12]
 8002050:	0a12      	lsrs	r2, r2, #8
 8002052:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	617b      	str	r3, [r7, #20]
      break;
 800205c:	e00c      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800205e:	4a13      	ldr	r2, [pc, #76]	; (80020ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002068:	68d2      	ldr	r2, [r2, #12]
 800206a:	0a12      	lsrs	r2, r2, #8
 800206c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002070:	fb02 f303 	mul.w	r3, r2, r3
 8002074:	617b      	str	r3, [r7, #20]
      break;
 8002076:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0e5b      	lsrs	r3, r3, #25
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	3301      	adds	r3, #1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	e001      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002098:	693b      	ldr	r3, [r7, #16]
}
 800209a:	4618      	mov	r0, r3
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	00f42400 	.word	0x00f42400
 80020b0:	016e3600 	.word	0x016e3600

080020b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3301      	adds	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d10c      	bne.n	80020f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020d8:	4a17      	ldr	r2, [pc, #92]	; (8002138 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	4a14      	ldr	r2, [pc, #80]	; (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020e2:	68d2      	ldr	r2, [r2, #12]
 80020e4:	0a12      	lsrs	r2, r2, #8
 80020e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
    break;
 80020f0:	e00c      	b.n	800210c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020fc:	68d2      	ldr	r2, [r2, #12]
 80020fe:	0a12      	lsrs	r2, r2, #8
 8002100:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
    break;
 800210a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0e5b      	lsrs	r3, r3, #25
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	3301      	adds	r3, #1
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002126:	687b      	ldr	r3, [r7, #4]
}
 8002128:	4618      	mov	r0, r3
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40021000 	.word	0x40021000
 8002138:	016e3600 	.word	0x016e3600
 800213c:	00f42400 	.word	0x00f42400

08002140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e09d      	b.n	800228e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	2b00      	cmp	r3, #0
 8002158:	d108      	bne.n	800216c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002162:	d009      	beq.n	8002178 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
 800216a:	e005      	b.n	8002178 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe fdb6 	bl	8000d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021b8:	d902      	bls.n	80021c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	e002      	b.n	80021c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80021ce:	d007      	beq.n	80021e0 <HAL_SPI_Init+0xa0>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021d8:	d002      	beq.n	80021e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002222:	ea42 0103 	orr.w	r1, r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	f003 0204 	and.w	r2, r3, #4
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800225c:	ea42 0103 	orr.w	r1, r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800227c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b088      	sub	sp, #32
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	4613      	mov	r3, r2
 80022a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_SPI_Transmit+0x22>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e158      	b.n	800256a <HAL_SPI_Transmit+0x2d4>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022c0:	f7fe feca 	bl	8001058 <HAL_GetTick>
 80022c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d002      	beq.n	80022dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80022d6:	2302      	movs	r3, #2
 80022d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022da:	e13d      	b.n	8002558 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_SPI_Transmit+0x52>
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022ec:	e134      	b.n	8002558 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2203      	movs	r2, #3
 80022f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	88fa      	ldrh	r2, [r7, #6]
 8002306:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	88fa      	ldrh	r2, [r7, #6]
 800230c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002338:	d10f      	bne.n	800235a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002348:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002358:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002364:	2b40      	cmp	r3, #64	; 0x40
 8002366:	d007      	beq.n	8002378 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002376:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002380:	d94b      	bls.n	800241a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_SPI_Transmit+0xfa>
 800238a:	8afb      	ldrh	r3, [r7, #22]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d13e      	bne.n	800240e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	881a      	ldrh	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	1c9a      	adds	r2, r3, #2
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023b4:	e02b      	b.n	800240e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d112      	bne.n	80023ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c8:	881a      	ldrh	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d4:	1c9a      	adds	r2, r3, #2
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023e8:	e011      	b.n	800240e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ea:	f7fe fe35 	bl	8001058 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d803      	bhi.n	8002402 <HAL_SPI_Transmit+0x16c>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002400:	d102      	bne.n	8002408 <HAL_SPI_Transmit+0x172>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800240c:	e0a4      	b.n	8002558 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ce      	bne.n	80023b6 <HAL_SPI_Transmit+0x120>
 8002418:	e07c      	b.n	8002514 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_SPI_Transmit+0x192>
 8002422:	8afb      	ldrh	r3, [r7, #22]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d170      	bne.n	800250a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d912      	bls.n	8002458 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	881a      	ldrh	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	1c9a      	adds	r2, r3, #2
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b02      	subs	r3, #2
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002456:	e058      	b.n	800250a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	330c      	adds	r3, #12
 8002462:	7812      	ldrb	r2, [r2, #0]
 8002464:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800247e:	e044      	b.n	800250a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b02      	cmp	r3, #2
 800248c:	d12b      	bne.n	80024e6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d912      	bls.n	80024be <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	881a      	ldrh	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	1c9a      	adds	r2, r3, #2
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b02      	subs	r3, #2
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024bc:	e025      	b.n	800250a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	330c      	adds	r3, #12
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024e4:	e011      	b.n	800250a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024e6:	f7fe fdb7 	bl	8001058 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d803      	bhi.n	80024fe <HAL_SPI_Transmit+0x268>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024fc:	d102      	bne.n	8002504 <HAL_SPI_Transmit+0x26e>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002508:	e026      	b.n	8002558 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1b5      	bne.n	8002480 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	6839      	ldr	r1, [r7, #0]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fce3 	bl	8002ee4 <SPI_EndRxTxTransaction>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10a      	bne.n	8002548 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	77fb      	strb	r3, [r7, #31]
 8002554:	e000      	b.n	8002558 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002556:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002568:	7ffb      	ldrb	r3, [r7, #31]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b088      	sub	sp, #32
 8002576:	af02      	add	r7, sp, #8
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4613      	mov	r3, r2
 8002580:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800258e:	d112      	bne.n	80025b6 <HAL_SPI_Receive+0x44>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10e      	bne.n	80025b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2204      	movs	r2, #4
 800259c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025a0:	88fa      	ldrh	r2, [r7, #6]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4613      	mov	r3, r2
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f910 	bl	80027d2 <HAL_SPI_TransmitReceive>
 80025b2:	4603      	mov	r3, r0
 80025b4:	e109      	b.n	80027ca <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_SPI_Receive+0x52>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e102      	b.n	80027ca <HAL_SPI_Receive+0x258>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025cc:	f7fe fd44 	bl	8001058 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d002      	beq.n	80025e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80025de:	2302      	movs	r3, #2
 80025e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025e2:	e0e9      	b.n	80027b8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_SPI_Receive+0x7e>
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025f4:	e0e0      	b.n	80027b8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2204      	movs	r2, #4
 80025fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	88fa      	ldrh	r2, [r7, #6]
 800260e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	88fa      	ldrh	r2, [r7, #6]
 8002616:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002640:	d908      	bls.n	8002654 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	e007      	b.n	8002664 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002662:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800266c:	d10f      	bne.n	800268e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800267c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d007      	beq.n	80026ac <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026b4:	d867      	bhi.n	8002786 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026b6:	e030      	b.n	800271a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d117      	bne.n	80026f6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f103 020c 	add.w	r2, r3, #12
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	7812      	ldrb	r2, [r2, #0]
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80026f4:	e011      	b.n	800271a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f6:	f7fe fcaf 	bl	8001058 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d803      	bhi.n	800270e <HAL_SPI_Receive+0x19c>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800270c:	d102      	bne.n	8002714 <HAL_SPI_Receive+0x1a2>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002718:	e04e      	b.n	80027b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1c8      	bne.n	80026b8 <HAL_SPI_Receive+0x146>
 8002726:	e034      	b.n	8002792 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b01      	cmp	r3, #1
 8002734:	d115      	bne.n	8002762 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	b292      	uxth	r2, r2
 8002742:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	1c9a      	adds	r2, r3, #2
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002760:	e011      	b.n	8002786 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002762:	f7fe fc79 	bl	8001058 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d803      	bhi.n	800277a <HAL_SPI_Receive+0x208>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002778:	d102      	bne.n	8002780 <HAL_SPI_Receive+0x20e>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002784:	e018      	b.n	80027b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1ca      	bne.n	8002728 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fb4c 	bl	8002e34 <SPI_EndRxTransaction>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	75fb      	strb	r3, [r7, #23]
 80027b4:	e000      	b.n	80027b8 <HAL_SPI_Receive+0x246>
  }

error :
 80027b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b08a      	sub	sp, #40	; 0x28
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027e0:	2301      	movs	r3, #1
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_SPI_TransmitReceive+0x26>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e1fb      	b.n	8002bf0 <HAL_SPI_TransmitReceive+0x41e>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002800:	f7fe fc2a 	bl	8001058 <HAL_GetTick>
 8002804:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800280c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002814:	887b      	ldrh	r3, [r7, #2]
 8002816:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002818:	887b      	ldrh	r3, [r7, #2]
 800281a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800281c:	7efb      	ldrb	r3, [r7, #27]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d00e      	beq.n	8002840 <HAL_SPI_TransmitReceive+0x6e>
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002828:	d106      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x66>
 8002832:	7efb      	ldrb	r3, [r7, #27]
 8002834:	2b04      	cmp	r3, #4
 8002836:	d003      	beq.n	8002840 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002838:	2302      	movs	r3, #2
 800283a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800283e:	e1cd      	b.n	8002bdc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_SPI_TransmitReceive+0x80>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_SPI_TransmitReceive+0x80>
 800284c:	887b      	ldrh	r3, [r7, #2]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002858:	e1c0      	b.n	8002bdc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b04      	cmp	r3, #4
 8002864:	d003      	beq.n	800286e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2205      	movs	r2, #5
 800286a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	887a      	ldrh	r2, [r7, #2]
 800287e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	887a      	ldrh	r2, [r7, #2]
 8002886:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	887a      	ldrh	r2, [r7, #2]
 800289a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028b0:	d802      	bhi.n	80028b8 <HAL_SPI_TransmitReceive+0xe6>
 80028b2:	8a3b      	ldrh	r3, [r7, #16]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d908      	bls.n	80028ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	e007      	b.n	80028da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e4:	2b40      	cmp	r3, #64	; 0x40
 80028e6:	d007      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002900:	d97c      	bls.n	80029fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_SPI_TransmitReceive+0x13e>
 800290a:	8a7b      	ldrh	r3, [r7, #18]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d169      	bne.n	80029e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	881a      	ldrh	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	1c9a      	adds	r2, r3, #2
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002934:	e056      	b.n	80029e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b02      	cmp	r3, #2
 8002942:	d11b      	bne.n	800297c <HAL_SPI_TransmitReceive+0x1aa>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d016      	beq.n	800297c <HAL_SPI_TransmitReceive+0x1aa>
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	2b01      	cmp	r3, #1
 8002952:	d113      	bne.n	800297c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	881a      	ldrh	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002964:	1c9a      	adds	r2, r3, #2
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b01      	cmp	r3, #1
 8002988:	d11c      	bne.n	80029c4 <HAL_SPI_TransmitReceive+0x1f2>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d016      	beq.n	80029c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	b292      	uxth	r2, r2
 80029a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	1c9a      	adds	r2, r3, #2
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029c0:	2301      	movs	r3, #1
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029c4:	f7fe fb48 	bl	8001058 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d807      	bhi.n	80029e4 <HAL_SPI_TransmitReceive+0x212>
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029da:	d003      	beq.n	80029e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80029e2:	e0fb      	b.n	8002bdc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1a3      	bne.n	8002936 <HAL_SPI_TransmitReceive+0x164>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d19d      	bne.n	8002936 <HAL_SPI_TransmitReceive+0x164>
 80029fa:	e0df      	b.n	8002bbc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_SPI_TransmitReceive+0x23a>
 8002a04:	8a7b      	ldrh	r3, [r7, #18]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	f040 80cb 	bne.w	8002ba2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d912      	bls.n	8002a3c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	881a      	ldrh	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	1c9a      	adds	r2, r3, #2
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3b02      	subs	r3, #2
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a3a:	e0b2      	b.n	8002ba2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	7812      	ldrb	r2, [r2, #0]
 8002a48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a62:	e09e      	b.n	8002ba2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d134      	bne.n	8002adc <HAL_SPI_TransmitReceive+0x30a>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d02f      	beq.n	8002adc <HAL_SPI_TransmitReceive+0x30a>
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d12c      	bne.n	8002adc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d912      	bls.n	8002ab2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	881a      	ldrh	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	1c9a      	adds	r2, r3, #2
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b02      	subs	r3, #2
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ab0:	e012      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	330c      	adds	r3, #12
 8002abc:	7812      	ldrb	r2, [r2, #0]
 8002abe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d148      	bne.n	8002b7c <HAL_SPI_TransmitReceive+0x3aa>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d042      	beq.n	8002b7c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d923      	bls.n	8002b4a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	b292      	uxth	r2, r2
 8002b0e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	1c9a      	adds	r2, r3, #2
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b02      	subs	r3, #2
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d81f      	bhi.n	8002b78 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	e016      	b.n	8002b78 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f103 020c 	add.w	r2, r3, #12
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	7812      	ldrb	r2, [r2, #0]
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b7c:	f7fe fa6c 	bl	8001058 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d803      	bhi.n	8002b94 <HAL_SPI_TransmitReceive+0x3c2>
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b92:	d102      	bne.n	8002b9a <HAL_SPI_TransmitReceive+0x3c8>
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002ba0:	e01c      	b.n	8002bdc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f47f af5b 	bne.w	8002a64 <HAL_SPI_TransmitReceive+0x292>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f47f af54 	bne.w	8002a64 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f98f 	bl	8002ee4 <SPI_EndRxTxTransaction>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d006      	beq.n	8002bda <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	661a      	str	r2, [r3, #96]	; 0x60
 8002bd8:	e000      	b.n	8002bdc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002bda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002bec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3728      	adds	r7, #40	; 0x28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	4613      	mov	r3, r2
 8002c06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c08:	f7fe fa26 	bl	8001058 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	4413      	add	r3, r2
 8002c16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c18:	f7fe fa1e 	bl	8001058 <HAL_GetTick>
 8002c1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c1e:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	015b      	lsls	r3, r3, #5
 8002c24:	0d1b      	lsrs	r3, r3, #20
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c2e:	e054      	b.n	8002cda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c36:	d050      	beq.n	8002cda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c38:	f7fe fa0e 	bl	8001058 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d902      	bls.n	8002c4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d13d      	bne.n	8002cca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c66:	d111      	bne.n	8002c8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c70:	d004      	beq.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7a:	d107      	bne.n	8002c8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c94:	d10f      	bne.n	8002cb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e017      	b.n	8002cfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	bf0c      	ite	eq
 8002cea:	2301      	moveq	r3, #1
 8002cec:	2300      	movne	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d19b      	bne.n	8002c30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000000 	.word	0x20000000

08002d08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	; 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d1a:	f7fe f99d 	bl	8001058 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002d2a:	f7fe f995 	bl	8001058 <HAL_GetTick>
 8002d2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d38:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00da      	lsls	r2, r3, #3
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	0d1b      	lsrs	r3, r3, #20
 8002d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d50:	e060      	b.n	8002e14 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d58:	d107      	bne.n	8002d6a <SPI_WaitFifoStateUntilTimeout+0x62>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d104      	bne.n	8002d6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d70:	d050      	beq.n	8002e14 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d72:	f7fe f971 	bl	8001058 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d902      	bls.n	8002d88 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d13d      	bne.n	8002e04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002da0:	d111      	bne.n	8002dc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002daa:	d004      	beq.n	8002db6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db4:	d107      	bne.n	8002dc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dce:	d10f      	bne.n	8002df0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e010      	b.n	8002e26 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d196      	bne.n	8002d52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3728      	adds	r7, #40	; 0x28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000000 	.word	0x20000000

08002e34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e48:	d111      	bne.n	8002e6e <SPI_EndRxTransaction+0x3a>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e52:	d004      	beq.n	8002e5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5c:	d107      	bne.n	8002e6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2180      	movs	r1, #128	; 0x80
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff febd 	bl	8002bf8 <SPI_WaitFlagStateUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e023      	b.n	8002edc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e9c:	d11d      	bne.n	8002eda <SPI_EndRxTransaction+0xa6>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea6:	d004      	beq.n	8002eb2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb0:	d113      	bne.n	8002eda <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff ff22 	bl	8002d08 <SPI_WaitFifoStateUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ece:	f043 0220 	orr.w	r2, r3, #32
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e000      	b.n	8002edc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7ff ff03 	bl	8002d08 <SPI_WaitFifoStateUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0c:	f043 0220 	orr.w	r2, r3, #32
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e027      	b.n	8002f68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7ff fe68 	bl	8002bf8 <SPI_WaitFlagStateUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e014      	b.n	8002f68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f7ff fedc 	bl	8002d08 <SPI_WaitFifoStateUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5a:	f043 0220 	orr.w	r2, r3, #32
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e000      	b.n	8002f68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e049      	b.n	8003016 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd fef8 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f000 fba4 	bl	80036fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e049      	b.n	80030c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d106      	bne.n	800304a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f841 	bl	80030cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3304      	adds	r3, #4
 800305a:	4619      	mov	r1, r3
 800305c:	4610      	mov	r0, r2
 800305e:	f000 fb4d 	bl	80036fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_TIM_PWM_Start+0x24>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e03c      	b.n	800317e <HAL_TIM_PWM_Start+0x9e>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b04      	cmp	r3, #4
 8003108:	d109      	bne.n	800311e <HAL_TIM_PWM_Start+0x3e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	bf14      	ite	ne
 8003116:	2301      	movne	r3, #1
 8003118:	2300      	moveq	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	e02f      	b.n	800317e <HAL_TIM_PWM_Start+0x9e>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b08      	cmp	r3, #8
 8003122:	d109      	bne.n	8003138 <HAL_TIM_PWM_Start+0x58>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e022      	b.n	800317e <HAL_TIM_PWM_Start+0x9e>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b0c      	cmp	r3, #12
 800313c:	d109      	bne.n	8003152 <HAL_TIM_PWM_Start+0x72>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b01      	cmp	r3, #1
 8003148:	bf14      	ite	ne
 800314a:	2301      	movne	r3, #1
 800314c:	2300      	moveq	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	e015      	b.n	800317e <HAL_TIM_PWM_Start+0x9e>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b10      	cmp	r3, #16
 8003156:	d109      	bne.n	800316c <HAL_TIM_PWM_Start+0x8c>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e008      	b.n	800317e <HAL_TIM_PWM_Start+0x9e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e097      	b.n	80032b6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d104      	bne.n	8003196 <HAL_TIM_PWM_Start+0xb6>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003194:	e023      	b.n	80031de <HAL_TIM_PWM_Start+0xfe>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d104      	bne.n	80031a6 <HAL_TIM_PWM_Start+0xc6>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a4:	e01b      	b.n	80031de <HAL_TIM_PWM_Start+0xfe>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d104      	bne.n	80031b6 <HAL_TIM_PWM_Start+0xd6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b4:	e013      	b.n	80031de <HAL_TIM_PWM_Start+0xfe>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_PWM_Start+0xe6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031c4:	e00b      	b.n	80031de <HAL_TIM_PWM_Start+0xfe>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start+0xf6>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031d4:	e003      	b.n	80031de <HAL_TIM_PWM_Start+0xfe>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2201      	movs	r2, #1
 80031e4:	6839      	ldr	r1, [r7, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 feaa 	bl	8003f40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a33      	ldr	r2, [pc, #204]	; (80032c0 <HAL_TIM_PWM_Start+0x1e0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_TIM_PWM_Start+0x13e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a32      	ldr	r2, [pc, #200]	; (80032c4 <HAL_TIM_PWM_Start+0x1e4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00e      	beq.n	800321e <HAL_TIM_PWM_Start+0x13e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a30      	ldr	r2, [pc, #192]	; (80032c8 <HAL_TIM_PWM_Start+0x1e8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_TIM_PWM_Start+0x13e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <HAL_TIM_PWM_Start+0x1ec>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_TIM_PWM_Start+0x13e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2d      	ldr	r2, [pc, #180]	; (80032d0 <HAL_TIM_PWM_Start+0x1f0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_TIM_PWM_Start+0x142>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_TIM_PWM_Start+0x144>
 8003222:	2300      	movs	r3, #0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a20      	ldr	r2, [pc, #128]	; (80032c0 <HAL_TIM_PWM_Start+0x1e0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d018      	beq.n	8003274 <HAL_TIM_PWM_Start+0x194>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324a:	d013      	beq.n	8003274 <HAL_TIM_PWM_Start+0x194>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a20      	ldr	r2, [pc, #128]	; (80032d4 <HAL_TIM_PWM_Start+0x1f4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00e      	beq.n	8003274 <HAL_TIM_PWM_Start+0x194>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1f      	ldr	r2, [pc, #124]	; (80032d8 <HAL_TIM_PWM_Start+0x1f8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d009      	beq.n	8003274 <HAL_TIM_PWM_Start+0x194>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <HAL_TIM_PWM_Start+0x1e4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d004      	beq.n	8003274 <HAL_TIM_PWM_Start+0x194>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a16      	ldr	r2, [pc, #88]	; (80032c8 <HAL_TIM_PWM_Start+0x1e8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d115      	bne.n	80032a0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	4b18      	ldr	r3, [pc, #96]	; (80032dc <HAL_TIM_PWM_Start+0x1fc>)
 800327c:	4013      	ands	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b06      	cmp	r3, #6
 8003284:	d015      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x1d2>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328c:	d011      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0201 	orr.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329e:	e008      	b.n	80032b2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	e000      	b.n	80032b4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40012c00 	.word	0x40012c00
 80032c4:	40013400 	.word	0x40013400
 80032c8:	40014000 	.word	0x40014000
 80032cc:	40014400 	.word	0x40014400
 80032d0:	40014800 	.word	0x40014800
 80032d4:	40000400 	.word	0x40000400
 80032d8:	40000800 	.word	0x40000800
 80032dc:	00010007 	.word	0x00010007

080032e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e0ff      	b.n	80034fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b14      	cmp	r3, #20
 800330a:	f200 80f0 	bhi.w	80034ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800330e:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	08003369 	.word	0x08003369
 8003318:	080034ef 	.word	0x080034ef
 800331c:	080034ef 	.word	0x080034ef
 8003320:	080034ef 	.word	0x080034ef
 8003324:	080033a9 	.word	0x080033a9
 8003328:	080034ef 	.word	0x080034ef
 800332c:	080034ef 	.word	0x080034ef
 8003330:	080034ef 	.word	0x080034ef
 8003334:	080033eb 	.word	0x080033eb
 8003338:	080034ef 	.word	0x080034ef
 800333c:	080034ef 	.word	0x080034ef
 8003340:	080034ef 	.word	0x080034ef
 8003344:	0800342b 	.word	0x0800342b
 8003348:	080034ef 	.word	0x080034ef
 800334c:	080034ef 	.word	0x080034ef
 8003350:	080034ef 	.word	0x080034ef
 8003354:	0800346d 	.word	0x0800346d
 8003358:	080034ef 	.word	0x080034ef
 800335c:	080034ef 	.word	0x080034ef
 8003360:	080034ef 	.word	0x080034ef
 8003364:	080034ad 	.word	0x080034ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fa54 	bl	800381c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0208 	orr.w	r2, r2, #8
 8003382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0204 	bic.w	r2, r2, #4
 8003392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6999      	ldr	r1, [r3, #24]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	619a      	str	r2, [r3, #24]
      break;
 80033a6:	e0a5      	b.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fac4 	bl	800393c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6999      	ldr	r1, [r3, #24]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	021a      	lsls	r2, r3, #8
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	619a      	str	r2, [r3, #24]
      break;
 80033e8:	e084      	b.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fb2d 	bl	8003a50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0208 	orr.w	r2, r2, #8
 8003404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0204 	bic.w	r2, r2, #4
 8003414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69d9      	ldr	r1, [r3, #28]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	61da      	str	r2, [r3, #28]
      break;
 8003428:	e064      	b.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fb95 	bl	8003b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69d9      	ldr	r1, [r3, #28]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	021a      	lsls	r2, r3, #8
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	61da      	str	r2, [r3, #28]
      break;
 800346a:	e043      	b.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fbfe 	bl	8003c74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0208 	orr.w	r2, r2, #8
 8003486:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0204 	bic.w	r2, r2, #4
 8003496:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80034aa:	e023      	b.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fc42 	bl	8003d3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	021a      	lsls	r2, r3, #8
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80034ec:	e002      	b.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
      break;
 80034f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop

08003508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_TIM_ConfigClockSource+0x1c>
 8003520:	2302      	movs	r3, #2
 8003522:	e0de      	b.n	80036e2 <HAL_TIM_ConfigClockSource+0x1da>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003542:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800354e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a63      	ldr	r2, [pc, #396]	; (80036ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	f000 80a9 	beq.w	80036b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003564:	4a61      	ldr	r2, [pc, #388]	; (80036ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	f200 80ae 	bhi.w	80036c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800356c:	4a60      	ldr	r2, [pc, #384]	; (80036f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	f000 80a1 	beq.w	80036b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003574:	4a5e      	ldr	r2, [pc, #376]	; (80036f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	f200 80a6 	bhi.w	80036c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800357c:	4a5d      	ldr	r2, [pc, #372]	; (80036f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800357e:	4293      	cmp	r3, r2
 8003580:	f000 8099 	beq.w	80036b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003584:	4a5b      	ldr	r2, [pc, #364]	; (80036f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003586:	4293      	cmp	r3, r2
 8003588:	f200 809e 	bhi.w	80036c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800358c:	4a5a      	ldr	r2, [pc, #360]	; (80036f8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	f000 8091 	beq.w	80036b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003594:	4a58      	ldr	r2, [pc, #352]	; (80036f8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	f200 8096 	bhi.w	80036c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800359c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80035a0:	f000 8089 	beq.w	80036b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80035a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80035a8:	f200 808e 	bhi.w	80036c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80035ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b0:	d03e      	beq.n	8003630 <HAL_TIM_ConfigClockSource+0x128>
 80035b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b6:	f200 8087 	bhi.w	80036c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80035ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035be:	f000 8086 	beq.w	80036ce <HAL_TIM_ConfigClockSource+0x1c6>
 80035c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c6:	d87f      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80035c8:	2b70      	cmp	r3, #112	; 0x70
 80035ca:	d01a      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0xfa>
 80035cc:	2b70      	cmp	r3, #112	; 0x70
 80035ce:	d87b      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80035d0:	2b60      	cmp	r3, #96	; 0x60
 80035d2:	d050      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x16e>
 80035d4:	2b60      	cmp	r3, #96	; 0x60
 80035d6:	d877      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80035d8:	2b50      	cmp	r3, #80	; 0x50
 80035da:	d03c      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0x14e>
 80035dc:	2b50      	cmp	r3, #80	; 0x50
 80035de:	d873      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80035e0:	2b40      	cmp	r3, #64	; 0x40
 80035e2:	d058      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x18e>
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d86f      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80035e8:	2b30      	cmp	r3, #48	; 0x30
 80035ea:	d064      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80035ec:	2b30      	cmp	r3, #48	; 0x30
 80035ee:	d86b      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d060      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d867      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d05c      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d05a      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003600:	e062      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6899      	ldr	r1, [r3, #8]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f000 fc75 	bl	8003f00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	609a      	str	r2, [r3, #8]
      break;
 800362e:	e04f      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	6899      	ldr	r1, [r3, #8]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f000 fc5e 	bl	8003f00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003652:	609a      	str	r2, [r3, #8]
      break;
 8003654:	e03c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	461a      	mov	r2, r3
 8003664:	f000 fbd0 	bl	8003e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2150      	movs	r1, #80	; 0x50
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fc29 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 8003674:	e02c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	461a      	mov	r2, r3
 8003684:	f000 fbef 	bl	8003e66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2160      	movs	r1, #96	; 0x60
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fc19 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 8003694:	e01c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6859      	ldr	r1, [r3, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	461a      	mov	r2, r3
 80036a4:	f000 fbb0 	bl	8003e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2140      	movs	r1, #64	; 0x40
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fc09 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 80036b4:	e00c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f000 fc00 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 80036c6:	e003      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      break;
 80036cc:	e000      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80036ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	00100070 	.word	0x00100070
 80036f0:	00100040 	.word	0x00100040
 80036f4:	00100030 	.word	0x00100030
 80036f8:	00100020 	.word	0x00100020

080036fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a3c      	ldr	r2, [pc, #240]	; (8003800 <TIM_Base_SetConfig+0x104>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00f      	beq.n	8003734 <TIM_Base_SetConfig+0x38>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371a:	d00b      	beq.n	8003734 <TIM_Base_SetConfig+0x38>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a39      	ldr	r2, [pc, #228]	; (8003804 <TIM_Base_SetConfig+0x108>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d007      	beq.n	8003734 <TIM_Base_SetConfig+0x38>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a38      	ldr	r2, [pc, #224]	; (8003808 <TIM_Base_SetConfig+0x10c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <TIM_Base_SetConfig+0x38>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a37      	ldr	r2, [pc, #220]	; (800380c <TIM_Base_SetConfig+0x110>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d108      	bne.n	8003746 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a2d      	ldr	r2, [pc, #180]	; (8003800 <TIM_Base_SetConfig+0x104>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01b      	beq.n	8003786 <TIM_Base_SetConfig+0x8a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003754:	d017      	beq.n	8003786 <TIM_Base_SetConfig+0x8a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a2a      	ldr	r2, [pc, #168]	; (8003804 <TIM_Base_SetConfig+0x108>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d013      	beq.n	8003786 <TIM_Base_SetConfig+0x8a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a29      	ldr	r2, [pc, #164]	; (8003808 <TIM_Base_SetConfig+0x10c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00f      	beq.n	8003786 <TIM_Base_SetConfig+0x8a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a28      	ldr	r2, [pc, #160]	; (800380c <TIM_Base_SetConfig+0x110>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00b      	beq.n	8003786 <TIM_Base_SetConfig+0x8a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a27      	ldr	r2, [pc, #156]	; (8003810 <TIM_Base_SetConfig+0x114>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d007      	beq.n	8003786 <TIM_Base_SetConfig+0x8a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a26      	ldr	r2, [pc, #152]	; (8003814 <TIM_Base_SetConfig+0x118>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <TIM_Base_SetConfig+0x8a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a25      	ldr	r2, [pc, #148]	; (8003818 <TIM_Base_SetConfig+0x11c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d108      	bne.n	8003798 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a10      	ldr	r2, [pc, #64]	; (8003800 <TIM_Base_SetConfig+0x104>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00f      	beq.n	80037e4 <TIM_Base_SetConfig+0xe8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a11      	ldr	r2, [pc, #68]	; (800380c <TIM_Base_SetConfig+0x110>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00b      	beq.n	80037e4 <TIM_Base_SetConfig+0xe8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a10      	ldr	r2, [pc, #64]	; (8003810 <TIM_Base_SetConfig+0x114>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d007      	beq.n	80037e4 <TIM_Base_SetConfig+0xe8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a0f      	ldr	r2, [pc, #60]	; (8003814 <TIM_Base_SetConfig+0x118>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_Base_SetConfig+0xe8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a0e      	ldr	r2, [pc, #56]	; (8003818 <TIM_Base_SetConfig+0x11c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d103      	bne.n	80037ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	615a      	str	r2, [r3, #20]
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	40013400 	.word	0x40013400
 8003810:	40014000 	.word	0x40014000
 8003814:	40014400 	.word	0x40014400
 8003818:	40014800 	.word	0x40014800

0800381c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f023 0201 	bic.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f023 0302 	bic.w	r3, r3, #2
 8003868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a2c      	ldr	r2, [pc, #176]	; (8003928 <TIM_OC1_SetConfig+0x10c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00f      	beq.n	800389c <TIM_OC1_SetConfig+0x80>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a2b      	ldr	r2, [pc, #172]	; (800392c <TIM_OC1_SetConfig+0x110>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00b      	beq.n	800389c <TIM_OC1_SetConfig+0x80>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a2a      	ldr	r2, [pc, #168]	; (8003930 <TIM_OC1_SetConfig+0x114>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d007      	beq.n	800389c <TIM_OC1_SetConfig+0x80>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a29      	ldr	r2, [pc, #164]	; (8003934 <TIM_OC1_SetConfig+0x118>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d003      	beq.n	800389c <TIM_OC1_SetConfig+0x80>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a28      	ldr	r2, [pc, #160]	; (8003938 <TIM_OC1_SetConfig+0x11c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d10c      	bne.n	80038b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f023 0308 	bic.w	r3, r3, #8
 80038a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f023 0304 	bic.w	r3, r3, #4
 80038b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <TIM_OC1_SetConfig+0x10c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00f      	beq.n	80038de <TIM_OC1_SetConfig+0xc2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a1a      	ldr	r2, [pc, #104]	; (800392c <TIM_OC1_SetConfig+0x110>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00b      	beq.n	80038de <TIM_OC1_SetConfig+0xc2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a19      	ldr	r2, [pc, #100]	; (8003930 <TIM_OC1_SetConfig+0x114>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d007      	beq.n	80038de <TIM_OC1_SetConfig+0xc2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a18      	ldr	r2, [pc, #96]	; (8003934 <TIM_OC1_SetConfig+0x118>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d003      	beq.n	80038de <TIM_OC1_SetConfig+0xc2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a17      	ldr	r2, [pc, #92]	; (8003938 <TIM_OC1_SetConfig+0x11c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d111      	bne.n	8003902 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	621a      	str	r2, [r3, #32]
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40013400 	.word	0x40013400
 8003930:	40014000 	.word	0x40014000
 8003934:	40014400 	.word	0x40014400
 8003938:	40014800 	.word	0x40014800

0800393c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	f023 0210 	bic.w	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800396a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800396e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 0320 	bic.w	r3, r3, #32
 800398a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a28      	ldr	r2, [pc, #160]	; (8003a3c <TIM_OC2_SetConfig+0x100>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_OC2_SetConfig+0x6c>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a27      	ldr	r2, [pc, #156]	; (8003a40 <TIM_OC2_SetConfig+0x104>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d10d      	bne.n	80039c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <TIM_OC2_SetConfig+0x100>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00f      	beq.n	80039ec <TIM_OC2_SetConfig+0xb0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1c      	ldr	r2, [pc, #112]	; (8003a40 <TIM_OC2_SetConfig+0x104>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00b      	beq.n	80039ec <TIM_OC2_SetConfig+0xb0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <TIM_OC2_SetConfig+0x108>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <TIM_OC2_SetConfig+0xb0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a1a      	ldr	r2, [pc, #104]	; (8003a48 <TIM_OC2_SetConfig+0x10c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_OC2_SetConfig+0xb0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <TIM_OC2_SetConfig+0x110>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d113      	bne.n	8003a14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40013400 	.word	0x40013400
 8003a44:	40014000 	.word	0x40014000
 8003a48:	40014400 	.word	0x40014400
 8003a4c:	40014800 	.word	0x40014800

08003a50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0303 	bic.w	r3, r3, #3
 8003a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a27      	ldr	r2, [pc, #156]	; (8003b4c <TIM_OC3_SetConfig+0xfc>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_OC3_SetConfig+0x6a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <TIM_OC3_SetConfig+0x100>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10d      	bne.n	8003ad6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a1c      	ldr	r2, [pc, #112]	; (8003b4c <TIM_OC3_SetConfig+0xfc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00f      	beq.n	8003afe <TIM_OC3_SetConfig+0xae>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a1b      	ldr	r2, [pc, #108]	; (8003b50 <TIM_OC3_SetConfig+0x100>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <TIM_OC3_SetConfig+0xae>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a1a      	ldr	r2, [pc, #104]	; (8003b54 <TIM_OC3_SetConfig+0x104>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_OC3_SetConfig+0xae>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a19      	ldr	r2, [pc, #100]	; (8003b58 <TIM_OC3_SetConfig+0x108>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_OC3_SetConfig+0xae>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a18      	ldr	r2, [pc, #96]	; (8003b5c <TIM_OC3_SetConfig+0x10c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d113      	bne.n	8003b26 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	621a      	str	r2, [r3, #32]
}
 8003b40:	bf00      	nop
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40013400 	.word	0x40013400
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800

08003b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	031b      	lsls	r3, r3, #12
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a28      	ldr	r2, [pc, #160]	; (8003c60 <TIM_OC4_SetConfig+0x100>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_OC4_SetConfig+0x6c>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a27      	ldr	r2, [pc, #156]	; (8003c64 <TIM_OC4_SetConfig+0x104>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10d      	bne.n	8003be8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	031b      	lsls	r3, r3, #12
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <TIM_OC4_SetConfig+0x100>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00f      	beq.n	8003c10 <TIM_OC4_SetConfig+0xb0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <TIM_OC4_SetConfig+0x104>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <TIM_OC4_SetConfig+0xb0>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a1b      	ldr	r2, [pc, #108]	; (8003c68 <TIM_OC4_SetConfig+0x108>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <TIM_OC4_SetConfig+0xb0>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <TIM_OC4_SetConfig+0x10c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_OC4_SetConfig+0xb0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <TIM_OC4_SetConfig+0x110>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d113      	bne.n	8003c38 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c16:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c1e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	019b      	lsls	r3, r3, #6
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	621a      	str	r2, [r3, #32]
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40013400 	.word	0x40013400
 8003c68:	40014000 	.word	0x40014000
 8003c6c:	40014400 	.word	0x40014400
 8003c70:	40014800 	.word	0x40014800

08003c74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003cb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <TIM_OC5_SetConfig+0xb4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00f      	beq.n	8003cee <TIM_OC5_SetConfig+0x7a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a16      	ldr	r2, [pc, #88]	; (8003d2c <TIM_OC5_SetConfig+0xb8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00b      	beq.n	8003cee <TIM_OC5_SetConfig+0x7a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <TIM_OC5_SetConfig+0xbc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d007      	beq.n	8003cee <TIM_OC5_SetConfig+0x7a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <TIM_OC5_SetConfig+0xc0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_OC5_SetConfig+0x7a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <TIM_OC5_SetConfig+0xc4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d109      	bne.n	8003d02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	621a      	str	r2, [r3, #32]
}
 8003d1c:	bf00      	nop
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	40013400 	.word	0x40013400
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40014400 	.word	0x40014400
 8003d38:	40014800 	.word	0x40014800

08003d3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	051b      	lsls	r3, r3, #20
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a18      	ldr	r2, [pc, #96]	; (8003df4 <TIM_OC6_SetConfig+0xb8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00f      	beq.n	8003db8 <TIM_OC6_SetConfig+0x7c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <TIM_OC6_SetConfig+0xbc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00b      	beq.n	8003db8 <TIM_OC6_SetConfig+0x7c>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <TIM_OC6_SetConfig+0xc0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d007      	beq.n	8003db8 <TIM_OC6_SetConfig+0x7c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a15      	ldr	r2, [pc, #84]	; (8003e00 <TIM_OC6_SetConfig+0xc4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_OC6_SetConfig+0x7c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a14      	ldr	r2, [pc, #80]	; (8003e04 <TIM_OC6_SetConfig+0xc8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d109      	bne.n	8003dcc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	029b      	lsls	r3, r3, #10
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40013400 	.word	0x40013400
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40014400 	.word	0x40014400
 8003e04:	40014800 	.word	0x40014800

08003e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	f023 0201 	bic.w	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f023 030a 	bic.w	r3, r3, #10
 8003e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b087      	sub	sp, #28
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f023 0210 	bic.w	r2, r3, #16
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	031b      	lsls	r3, r3, #12
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	621a      	str	r2, [r3, #32]
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f043 0307 	orr.w	r3, r3, #7
 8003eec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	609a      	str	r2, [r3, #8]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	021a      	lsls	r2, r3, #8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	609a      	str	r2, [r3, #8]
}
 8003f34:	bf00      	nop
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2201      	movs	r2, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1a      	ldr	r2, [r3, #32]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	401a      	ands	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1a      	ldr	r2, [r3, #32]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	fa01 f303 	lsl.w	r3, r1, r3
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d109      	bne.n	8003fb0 <HAL_TIMEx_PWMN_Start+0x24>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	bf14      	ite	ne
 8003fa8:	2301      	movne	r3, #1
 8003faa:	2300      	moveq	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e022      	b.n	8003ff6 <HAL_TIMEx_PWMN_Start+0x6a>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d109      	bne.n	8003fca <HAL_TIMEx_PWMN_Start+0x3e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	bf14      	ite	ne
 8003fc2:	2301      	movne	r3, #1
 8003fc4:	2300      	moveq	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e015      	b.n	8003ff6 <HAL_TIMEx_PWMN_Start+0x6a>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d109      	bne.n	8003fe4 <HAL_TIMEx_PWMN_Start+0x58>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	bf14      	ite	ne
 8003fdc:	2301      	movne	r3, #1
 8003fde:	2300      	moveq	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	e008      	b.n	8003ff6 <HAL_TIMEx_PWMN_Start+0x6a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	bf14      	ite	ne
 8003ff0:	2301      	movne	r3, #1
 8003ff2:	2300      	moveq	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e069      	b.n	80040d2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d104      	bne.n	800400e <HAL_TIMEx_PWMN_Start+0x82>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800400c:	e013      	b.n	8004036 <HAL_TIMEx_PWMN_Start+0xaa>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b04      	cmp	r3, #4
 8004012:	d104      	bne.n	800401e <HAL_TIMEx_PWMN_Start+0x92>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800401c:	e00b      	b.n	8004036 <HAL_TIMEx_PWMN_Start+0xaa>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d104      	bne.n	800402e <HAL_TIMEx_PWMN_Start+0xa2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800402c:	e003      	b.n	8004036 <HAL_TIMEx_PWMN_Start+0xaa>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2202      	movs	r2, #2
 8004032:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2204      	movs	r2, #4
 800403c:	6839      	ldr	r1, [r7, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 f97a 	bl	8004338 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004052:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a20      	ldr	r2, [pc, #128]	; (80040dc <HAL_TIMEx_PWMN_Start+0x150>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d018      	beq.n	8004090 <HAL_TIMEx_PWMN_Start+0x104>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004066:	d013      	beq.n	8004090 <HAL_TIMEx_PWMN_Start+0x104>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <HAL_TIMEx_PWMN_Start+0x154>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00e      	beq.n	8004090 <HAL_TIMEx_PWMN_Start+0x104>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <HAL_TIMEx_PWMN_Start+0x158>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d009      	beq.n	8004090 <HAL_TIMEx_PWMN_Start+0x104>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a19      	ldr	r2, [pc, #100]	; (80040e8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <HAL_TIMEx_PWMN_Start+0x104>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a18      	ldr	r2, [pc, #96]	; (80040ec <HAL_TIMEx_PWMN_Start+0x160>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d115      	bne.n	80040bc <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <HAL_TIMEx_PWMN_Start+0x164>)
 8004098:	4013      	ands	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b06      	cmp	r3, #6
 80040a0:	d015      	beq.n	80040ce <HAL_TIMEx_PWMN_Start+0x142>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a8:	d011      	beq.n	80040ce <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	e008      	b.n	80040ce <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	e000      	b.n	80040d0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40012c00 	.word	0x40012c00
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40013400 	.word	0x40013400
 80040ec:	40014000 	.word	0x40014000
 80040f0:	00010007 	.word	0x00010007

080040f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004108:	2302      	movs	r3, #2
 800410a:	e065      	b.n	80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a2c      	ldr	r2, [pc, #176]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a2b      	ldr	r2, [pc, #172]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d108      	bne.n	8004152 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004146:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d018      	beq.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004182:	d013      	beq.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a18      	ldr	r2, [pc, #96]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00e      	beq.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a17      	ldr	r2, [pc, #92]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d009      	beq.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d004      	beq.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d10c      	bne.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40013400 	.word	0x40013400
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40014000 	.word	0x40014000

080041f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004210:	2302      	movs	r3, #2
 8004212:	e087      	b.n	8004324 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	041b      	lsls	r3, r3, #16
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a27      	ldr	r2, [pc, #156]	; (8004330 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a25      	ldr	r2, [pc, #148]	; (8004334 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d106      	bne.n	80042b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1e      	ldr	r2, [pc, #120]	; (8004330 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d126      	bne.n	8004312 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	051b      	lsls	r3, r3, #20
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a0e      	ldr	r2, [pc, #56]	; (8004330 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a0d      	ldr	r2, [pc, #52]	; (8004334 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d106      	bne.n	8004312 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40013400 	.word	0x40013400

08004338 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	2204      	movs	r2, #4
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a1a      	ldr	r2, [r3, #32]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	43db      	mvns	r3, r3
 800435a:	401a      	ands	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	431a      	orrs	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	621a      	str	r2, [r3, #32]
}
 8004376:	bf00      	nop
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <memset>:
 8004382:	4402      	add	r2, r0
 8004384:	4603      	mov	r3, r0
 8004386:	4293      	cmp	r3, r2
 8004388:	d100      	bne.n	800438c <memset+0xa>
 800438a:	4770      	bx	lr
 800438c:	f803 1b01 	strb.w	r1, [r3], #1
 8004390:	e7f9      	b.n	8004386 <memset+0x4>
	...

08004394 <__libc_init_array>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	4d0d      	ldr	r5, [pc, #52]	; (80043cc <__libc_init_array+0x38>)
 8004398:	4c0d      	ldr	r4, [pc, #52]	; (80043d0 <__libc_init_array+0x3c>)
 800439a:	1b64      	subs	r4, r4, r5
 800439c:	10a4      	asrs	r4, r4, #2
 800439e:	2600      	movs	r6, #0
 80043a0:	42a6      	cmp	r6, r4
 80043a2:	d109      	bne.n	80043b8 <__libc_init_array+0x24>
 80043a4:	4d0b      	ldr	r5, [pc, #44]	; (80043d4 <__libc_init_array+0x40>)
 80043a6:	4c0c      	ldr	r4, [pc, #48]	; (80043d8 <__libc_init_array+0x44>)
 80043a8:	f000 f818 	bl	80043dc <_init>
 80043ac:	1b64      	subs	r4, r4, r5
 80043ae:	10a4      	asrs	r4, r4, #2
 80043b0:	2600      	movs	r6, #0
 80043b2:	42a6      	cmp	r6, r4
 80043b4:	d105      	bne.n	80043c2 <__libc_init_array+0x2e>
 80043b6:	bd70      	pop	{r4, r5, r6, pc}
 80043b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043bc:	4798      	blx	r3
 80043be:	3601      	adds	r6, #1
 80043c0:	e7ee      	b.n	80043a0 <__libc_init_array+0xc>
 80043c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c6:	4798      	blx	r3
 80043c8:	3601      	adds	r6, #1
 80043ca:	e7f2      	b.n	80043b2 <__libc_init_array+0x1e>
 80043cc:	08004404 	.word	0x08004404
 80043d0:	08004404 	.word	0x08004404
 80043d4:	08004404 	.word	0x08004404
 80043d8:	08004408 	.word	0x08004408

080043dc <_init>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	bf00      	nop
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr

080043e8 <_fini>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	bf00      	nop
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr
