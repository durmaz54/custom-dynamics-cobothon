
COBOTHON DNM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001698  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001870  08001870  00011870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001880  08001880  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001880  08001880  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001880  08001880  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001880  08001880  00011880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001884  08001884  00011884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001894  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001894  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000047f9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000105f  00000000  00000000  00024835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000580  00000000  00000000  00025898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004e8  00000000  00000000  00025e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b392  00000000  00000000  00026300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000058a9  00000000  00000000  00041692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac4ce  00000000  00000000  00046f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3409  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000142c  00000000  00000000  000f345c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001858 	.word	0x08001858

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08001858 	.word	0x08001858

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fa3e 	bl	800069e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f909 	bl	8000438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f953 	bl	80004d0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  uint16_t phaseDelay = 1;
 800022a:	2301      	movs	r3, #1
 800022c:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  IN_U_PIN_ON;
 800022e:	2201      	movs	r2, #1
 8000230:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000238:	f000 fd2a 	bl	8000c90 <HAL_GPIO_WritePin>
	  IN_V_PIN_OFF;
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000246:	f000 fd23 	bl	8000c90 <HAL_GPIO_WritePin>
	  IN_W_PIN_OFF;
 800024a:	2200      	movs	r2, #0
 800024c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000254:	f000 fd1c 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_U_PIN_OFF;
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025e:	4875      	ldr	r0, [pc, #468]	; (8000434 <main+0x21c>)
 8000260:	f000 fd16 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_V_PIN_ON;
 8000264:	2201      	movs	r2, #1
 8000266:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800026a:	4872      	ldr	r0, [pc, #456]	; (8000434 <main+0x21c>)
 800026c:	f000 fd10 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_W_PIN_OFF;
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000276:	486f      	ldr	r0, [pc, #444]	; (8000434 <main+0x21c>)
 8000278:	f000 fd0a 	bl	8000c90 <HAL_GPIO_WritePin>
	  HAL_Delay(phaseDelay);
 800027c:	88fb      	ldrh	r3, [r7, #6]
 800027e:	4618      	mov	r0, r3
 8000280:	f000 fa7e 	bl	8000780 <HAL_Delay>

	  IN_U_PIN_ON;
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028e:	f000 fcff 	bl	8000c90 <HAL_GPIO_WritePin>
	  IN_V_PIN_OFF;
 8000292:	2200      	movs	r2, #0
 8000294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029c:	f000 fcf8 	bl	8000c90 <HAL_GPIO_WritePin>
	  IN_W_PIN_OFF;
 80002a0:	2200      	movs	r2, #0
 80002a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002aa:	f000 fcf1 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_U_PIN_OFF;
 80002ae:	2200      	movs	r2, #0
 80002b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b4:	485f      	ldr	r0, [pc, #380]	; (8000434 <main+0x21c>)
 80002b6:	f000 fceb 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_V_PIN_OFF;
 80002ba:	2200      	movs	r2, #0
 80002bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002c0:	485c      	ldr	r0, [pc, #368]	; (8000434 <main+0x21c>)
 80002c2:	f000 fce5 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_W_PIN_ON;
 80002c6:	2201      	movs	r2, #1
 80002c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002cc:	4859      	ldr	r0, [pc, #356]	; (8000434 <main+0x21c>)
 80002ce:	f000 fcdf 	bl	8000c90 <HAL_GPIO_WritePin>
	  HAL_Delay(phaseDelay);
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fa53 	bl	8000780 <HAL_Delay>

	  IN_U_PIN_OFF;
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e4:	f000 fcd4 	bl	8000c90 <HAL_GPIO_WritePin>
	  IN_V_PIN_ON;
 80002e8:	2201      	movs	r2, #1
 80002ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f2:	f000 fccd 	bl	8000c90 <HAL_GPIO_WritePin>
	  IN_W_PIN_OFF;
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000300:	f000 fcc6 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_U_PIN_OFF;
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030a:	484a      	ldr	r0, [pc, #296]	; (8000434 <main+0x21c>)
 800030c:	f000 fcc0 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_V_PIN_OFF;
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000316:	4847      	ldr	r0, [pc, #284]	; (8000434 <main+0x21c>)
 8000318:	f000 fcba 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_W_PIN_ON;
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000322:	4844      	ldr	r0, [pc, #272]	; (8000434 <main+0x21c>)
 8000324:	f000 fcb4 	bl	8000c90 <HAL_GPIO_WritePin>
	  HAL_Delay(phaseDelay);
 8000328:	88fb      	ldrh	r3, [r7, #6]
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fa28 	bl	8000780 <HAL_Delay>

	  IN_U_PIN_OFF;
 8000330:	2200      	movs	r2, #0
 8000332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033a:	f000 fca9 	bl	8000c90 <HAL_GPIO_WritePin>
	  IN_V_PIN_ON;
 800033e:	2201      	movs	r2, #1
 8000340:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000348:	f000 fca2 	bl	8000c90 <HAL_GPIO_WritePin>
	  IN_W_PIN_OFF;
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000356:	f000 fc9b 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_U_PIN_ON;
 800035a:	2201      	movs	r2, #1
 800035c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000360:	4834      	ldr	r0, [pc, #208]	; (8000434 <main+0x21c>)
 8000362:	f000 fc95 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_V_PIN_OFF;
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800036c:	4831      	ldr	r0, [pc, #196]	; (8000434 <main+0x21c>)
 800036e:	f000 fc8f 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_W_PIN_OFF;
 8000372:	2200      	movs	r2, #0
 8000374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000378:	482e      	ldr	r0, [pc, #184]	; (8000434 <main+0x21c>)
 800037a:	f000 fc89 	bl	8000c90 <HAL_GPIO_WritePin>
	  HAL_Delay(phaseDelay);
 800037e:	88fb      	ldrh	r3, [r7, #6]
 8000380:	4618      	mov	r0, r3
 8000382:	f000 f9fd 	bl	8000780 <HAL_Delay>

	  IN_U_PIN_OFF;
 8000386:	2200      	movs	r2, #0
 8000388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800038c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000390:	f000 fc7e 	bl	8000c90 <HAL_GPIO_WritePin>
	  IN_V_PIN_OFF;
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800039a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039e:	f000 fc77 	bl	8000c90 <HAL_GPIO_WritePin>
	  IN_W_PIN_ON;
 80003a2:	2201      	movs	r2, #1
 80003a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ac:	f000 fc70 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_U_PIN_ON;
 80003b0:	2201      	movs	r2, #1
 80003b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b6:	481f      	ldr	r0, [pc, #124]	; (8000434 <main+0x21c>)
 80003b8:	f000 fc6a 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_V_PIN_OFF;
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003c2:	481c      	ldr	r0, [pc, #112]	; (8000434 <main+0x21c>)
 80003c4:	f000 fc64 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_W_PIN_OFF;
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ce:	4819      	ldr	r0, [pc, #100]	; (8000434 <main+0x21c>)
 80003d0:	f000 fc5e 	bl	8000c90 <HAL_GPIO_WritePin>
	  HAL_Delay(phaseDelay);
 80003d4:	88fb      	ldrh	r3, [r7, #6]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f9d2 	bl	8000780 <HAL_Delay>

	  IN_U_PIN_OFF;
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e6:	f000 fc53 	bl	8000c90 <HAL_GPIO_WritePin>
	  IN_V_PIN_OFF;
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f4:	f000 fc4c 	bl	8000c90 <HAL_GPIO_WritePin>
	  IN_W_PIN_ON;
 80003f8:	2201      	movs	r2, #1
 80003fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000402:	f000 fc45 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_U_PIN_OFF;
 8000406:	2200      	movs	r2, #0
 8000408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040c:	4809      	ldr	r0, [pc, #36]	; (8000434 <main+0x21c>)
 800040e:	f000 fc3f 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_V_PIN_ON;
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000418:	4806      	ldr	r0, [pc, #24]	; (8000434 <main+0x21c>)
 800041a:	f000 fc39 	bl	8000c90 <HAL_GPIO_WritePin>
	  EN_W_PIN_OFF;
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000424:	4803      	ldr	r0, [pc, #12]	; (8000434 <main+0x21c>)
 8000426:	f000 fc33 	bl	8000c90 <HAL_GPIO_WritePin>
	  HAL_Delay(phaseDelay);
 800042a:	88fb      	ldrh	r3, [r7, #6]
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f9a7 	bl	8000780 <HAL_Delay>
	  IN_U_PIN_ON;
 8000432:	e6fc      	b.n	800022e <main+0x16>
 8000434:	48000400 	.word	0x48000400

08000438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b094      	sub	sp, #80	; 0x50
 800043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	f107 0318 	add.w	r3, r7, #24
 8000442:	2238      	movs	r2, #56	; 0x38
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f001 f9fe 	bl	8001848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800045a:	2000      	movs	r0, #0
 800045c:	f000 fc30 	bl	8000cc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000460:	2302      	movs	r3, #2
 8000462:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000468:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800046a:	2340      	movs	r3, #64	; 0x40
 800046c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046e:	2302      	movs	r3, #2
 8000470:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000472:	2302      	movs	r3, #2
 8000474:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000476:	2304      	movs	r3, #4
 8000478:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800047a:	2355      	movs	r3, #85	; 0x55
 800047c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800047e:	2302      	movs	r3, #2
 8000480:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000482:	2302      	movs	r3, #2
 8000484:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000486:	2302      	movs	r3, #2
 8000488:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fcba 	bl	8000e08 <HAL_RCC_OscConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800049a:	f000 f871 	bl	8000580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049e:	230f      	movs	r3, #15
 80004a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a2:	2303      	movs	r3, #3
 80004a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2104      	movs	r1, #4
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 ffbe 	bl	8001438 <HAL_RCC_ClockConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80004c2:	f000 f85d 	bl	8000580 <Error_Handler>
  }
}
 80004c6:	bf00      	nop
 80004c8:	3750      	adds	r7, #80	; 0x50
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e6:	4b24      	ldr	r3, [pc, #144]	; (8000578 <MX_GPIO_Init+0xa8>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	4a23      	ldr	r2, [pc, #140]	; (8000578 <MX_GPIO_Init+0xa8>)
 80004ec:	f043 0302 	orr.w	r3, r3, #2
 80004f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <MX_GPIO_Init+0xa8>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	f003 0302 	and.w	r3, r3, #2
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <MX_GPIO_Init+0xa8>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	4a1d      	ldr	r2, [pc, #116]	; (8000578 <MX_GPIO_Init+0xa8>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050a:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_GPIO_Init+0xa8>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_U_PIN_Pin|EN_V_PIN_Pin|EN_W_PIN_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800051c:	4817      	ldr	r0, [pc, #92]	; (800057c <MX_GPIO_Init+0xac>)
 800051e:	f000 fbb7 	bl	8000c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN_U_PIN_Pin|IN_V_PIN_Pin|IN_W_PIN_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f000 fbb0 	bl	8000c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_U_PIN_Pin EN_V_PIN_Pin EN_W_PIN_Pin */
  GPIO_InitStruct.Pin = EN_U_PIN_Pin|EN_V_PIN_Pin|EN_W_PIN_Pin;
 8000530:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	2301      	movs	r3, #1
 8000538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	4619      	mov	r1, r3
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <MX_GPIO_Init+0xac>)
 800054a:	f000 fa1f 	bl	800098c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_U_PIN_Pin IN_V_PIN_Pin IN_W_PIN_Pin */
  GPIO_InitStruct.Pin = IN_U_PIN_Pin|IN_V_PIN_Pin|IN_W_PIN_Pin;
 800054e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2300      	movs	r3, #0
 800055e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	4619      	mov	r1, r3
 8000566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056a:	f000 fa0f 	bl	800098c <HAL_GPIO_Init>

}
 800056e:	bf00      	nop
 8000570:	3720      	adds	r7, #32
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	48000400 	.word	0x48000400

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000588:	e7fe      	b.n	8000588 <Error_Handler+0x8>
	...

0800058c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <HAL_MspInit+0x44>)
 8000594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_MspInit+0x44>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6613      	str	r3, [r2, #96]	; 0x60
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_MspInit+0x44>)
 80005a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <HAL_MspInit+0x44>)
 80005ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ae:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <HAL_MspInit+0x44>)
 80005b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b4:	6593      	str	r3, [r2, #88]	; 0x58
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_MspInit+0x44>)
 80005b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <NMI_Handler+0x4>

080005da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <HardFault_Handler+0x4>

080005e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <MemManage_Handler+0x4>

080005e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <BusFault_Handler+0x4>

080005ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <UsageFault_Handler+0x4>

080005f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000620:	f000 f890 	bl	8000744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <SystemInit+0x20>)
 800062e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <SystemInit+0x20>)
 8000634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <LoopForever+0x6>)
  ldr r1, =_edata
 8000652:	490e      	ldr	r1, [pc, #56]	; (800068c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000654:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <LoopForever+0xe>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000668:	4c0b      	ldr	r4, [pc, #44]	; (8000698 <LoopForever+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000676:	f7ff ffd7 	bl	8000628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800067a:	f001 f8c1 	bl	8001800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800067e:	f7ff fdcb 	bl	8000218 <main>

08000682 <LoopForever>:

LoopForever:
    b LoopForever
 8000682:	e7fe      	b.n	8000682 <LoopForever>
  ldr   r0, =_estack
 8000684:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000690:	08001888 	.word	0x08001888
  ldr r2, =_sbss
 8000694:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000698:	2000002c 	.word	0x2000002c

0800069c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_2_IRQHandler>

0800069e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006a4:	2300      	movs	r3, #0
 80006a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a8:	2003      	movs	r0, #3
 80006aa:	f000 f93d 	bl	8000928 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ae:	200f      	movs	r0, #15
 80006b0:	f000 f80e 	bl	80006d0 <HAL_InitTick>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d002      	beq.n	80006c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	e001      	b.n	80006c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006c0:	f7ff ff64 	bl	800058c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006c4:	79fb      	ldrb	r3, [r7, #7]

}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <HAL_InitTick+0x68>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d022      	beq.n	800072a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <HAL_InitTick+0x6c>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <HAL_InitTick+0x68>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80006f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f93a 	bl	8000972 <HAL_SYSTICK_Config>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d10f      	bne.n	8000724 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b0f      	cmp	r3, #15
 8000708:	d809      	bhi.n	800071e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800070a:	2200      	movs	r2, #0
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	f04f 30ff 	mov.w	r0, #4294967295
 8000712:	f000 f914 	bl	800093e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000716:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <HAL_InitTick+0x70>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	e007      	b.n	800072e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
 8000722:	e004      	b.n	800072e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000724:	2301      	movs	r3, #1
 8000726:	73fb      	strb	r3, [r7, #15]
 8000728:	e001      	b.n	800072e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800072e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000008 	.word	0x20000008
 800073c:	20000000 	.word	0x20000000
 8000740:	20000004 	.word	0x20000004

08000744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_IncTick+0x1c>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_IncTick+0x20>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4413      	add	r3, r2
 8000752:	4a03      	ldr	r2, [pc, #12]	; (8000760 <HAL_IncTick+0x1c>)
 8000754:	6013      	str	r3, [r2, #0]
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	20000028 	.word	0x20000028
 8000764:	20000008 	.word	0x20000008

08000768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <HAL_GetTick+0x14>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000028 	.word	0x20000028

08000780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000788:	f7ff ffee 	bl	8000768 <HAL_GetTick>
 800078c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000798:	d004      	beq.n	80007a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_Delay+0x40>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	4413      	add	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007a4:	bf00      	nop
 80007a6:	f7ff ffdf 	bl	8000768 <HAL_GetTick>
 80007aa:	4602      	mov	r2, r0
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d8f7      	bhi.n	80007a6 <HAL_Delay+0x26>
  {
  }
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000008 	.word	0x20000008

080007c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	db0a      	blt.n	8000852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	b2da      	uxtb	r2, r3
 8000840:	490c      	ldr	r1, [pc, #48]	; (8000874 <__NVIC_SetPriority+0x4c>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	0112      	lsls	r2, r2, #4
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	440b      	add	r3, r1
 800084c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000850:	e00a      	b.n	8000868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4908      	ldr	r1, [pc, #32]	; (8000878 <__NVIC_SetPriority+0x50>)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	3b04      	subs	r3, #4
 8000860:	0112      	lsls	r2, r2, #4
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	440b      	add	r3, r1
 8000866:	761a      	strb	r2, [r3, #24]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000e100 	.word	0xe000e100
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800087c:	b480      	push	{r7}
 800087e:	b089      	sub	sp, #36	; 0x24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	f1c3 0307 	rsb	r3, r3, #7
 8000896:	2b04      	cmp	r3, #4
 8000898:	bf28      	it	cs
 800089a:	2304      	movcs	r3, #4
 800089c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3304      	adds	r3, #4
 80008a2:	2b06      	cmp	r3, #6
 80008a4:	d902      	bls.n	80008ac <NVIC_EncodePriority+0x30>
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3b03      	subs	r3, #3
 80008aa:	e000      	b.n	80008ae <NVIC_EncodePriority+0x32>
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	f04f 32ff 	mov.w	r2, #4294967295
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43da      	mvns	r2, r3
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	401a      	ands	r2, r3
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c4:	f04f 31ff 	mov.w	r1, #4294967295
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	43d9      	mvns	r1, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	4313      	orrs	r3, r2
         );
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3724      	adds	r7, #36	; 0x24
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f4:	d301      	bcc.n	80008fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00f      	b.n	800091a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <SysTick_Config+0x40>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000902:	210f      	movs	r1, #15
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f7ff ff8e 	bl	8000828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <SysTick_Config+0x40>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <SysTick_Config+0x40>)
 8000914:	2207      	movs	r2, #7
 8000916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	e000e010 	.word	0xe000e010

08000928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff ff47 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
 800094a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800094c:	f7ff ff5e 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	6978      	ldr	r0, [r7, #20]
 8000958:	f7ff ff90 	bl	800087c <NVIC_EncodePriority>
 800095c:	4602      	mov	r2, r0
 800095e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff5f 	bl	8000828 <__NVIC_SetPriority>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffb2 	bl	80008e4 <SysTick_Config>
 8000980:	4603      	mov	r3, r0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800098c:	b480      	push	{r7}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800099a:	e15a      	b.n	8000c52 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	2101      	movs	r1, #1
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	fa01 f303 	lsl.w	r3, r1, r3
 80009a8:	4013      	ands	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 814c 	beq.w	8000c4c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d005      	beq.n	80009cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d130      	bne.n	8000a2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	2203      	movs	r2, #3
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a02:	2201      	movs	r2, #1
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	091b      	lsrs	r3, r3, #4
 8000a18:	f003 0201 	and.w	r2, r3, #1
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 0303 	and.w	r3, r3, #3
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d017      	beq.n	8000a6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	2203      	movs	r2, #3
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d123      	bne.n	8000abe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	08da      	lsrs	r2, r3, #3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3208      	adds	r2, #8
 8000a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	220f      	movs	r2, #15
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	691a      	ldr	r2, [r3, #16]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	08da      	lsrs	r2, r3, #3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3208      	adds	r2, #8
 8000ab8:	6939      	ldr	r1, [r7, #16]
 8000aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	2203      	movs	r2, #3
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 0203 	and.w	r2, r3, #3
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 80a6 	beq.w	8000c4c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b00:	4b5b      	ldr	r3, [pc, #364]	; (8000c70 <HAL_GPIO_Init+0x2e4>)
 8000b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b04:	4a5a      	ldr	r2, [pc, #360]	; (8000c70 <HAL_GPIO_Init+0x2e4>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0c:	4b58      	ldr	r3, [pc, #352]	; (8000c70 <HAL_GPIO_Init+0x2e4>)
 8000b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b18:	4a56      	ldr	r2, [pc, #344]	; (8000c74 <HAL_GPIO_Init+0x2e8>)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	089b      	lsrs	r3, r3, #2
 8000b1e:	3302      	adds	r3, #2
 8000b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	220f      	movs	r2, #15
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b42:	d01f      	beq.n	8000b84 <HAL_GPIO_Init+0x1f8>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a4c      	ldr	r2, [pc, #304]	; (8000c78 <HAL_GPIO_Init+0x2ec>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d019      	beq.n	8000b80 <HAL_GPIO_Init+0x1f4>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a4b      	ldr	r2, [pc, #300]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d013      	beq.n	8000b7c <HAL_GPIO_Init+0x1f0>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a4a      	ldr	r2, [pc, #296]	; (8000c80 <HAL_GPIO_Init+0x2f4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d00d      	beq.n	8000b78 <HAL_GPIO_Init+0x1ec>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a49      	ldr	r2, [pc, #292]	; (8000c84 <HAL_GPIO_Init+0x2f8>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d007      	beq.n	8000b74 <HAL_GPIO_Init+0x1e8>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a48      	ldr	r2, [pc, #288]	; (8000c88 <HAL_GPIO_Init+0x2fc>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d101      	bne.n	8000b70 <HAL_GPIO_Init+0x1e4>
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	e00a      	b.n	8000b86 <HAL_GPIO_Init+0x1fa>
 8000b70:	2306      	movs	r3, #6
 8000b72:	e008      	b.n	8000b86 <HAL_GPIO_Init+0x1fa>
 8000b74:	2304      	movs	r3, #4
 8000b76:	e006      	b.n	8000b86 <HAL_GPIO_Init+0x1fa>
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e004      	b.n	8000b86 <HAL_GPIO_Init+0x1fa>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	e002      	b.n	8000b86 <HAL_GPIO_Init+0x1fa>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <HAL_GPIO_Init+0x1fa>
 8000b84:	2300      	movs	r3, #0
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	f002 0203 	and.w	r2, r2, #3
 8000b8c:	0092      	lsls	r2, r2, #2
 8000b8e:	4093      	lsls	r3, r2
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b96:	4937      	ldr	r1, [pc, #220]	; (8000c74 <HAL_GPIO_Init+0x2e8>)
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ba4:	4b39      	ldr	r3, [pc, #228]	; (8000c8c <HAL_GPIO_Init+0x300>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bc8:	4a30      	ldr	r2, [pc, #192]	; (8000c8c <HAL_GPIO_Init+0x300>)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <HAL_GPIO_Init+0x300>)
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bf2:	4a26      	ldr	r2, [pc, #152]	; (8000c8c <HAL_GPIO_Init+0x300>)
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <HAL_GPIO_Init+0x300>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <HAL_GPIO_Init+0x300>)
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <HAL_GPIO_Init+0x300>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c46:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <HAL_GPIO_Init+0x300>)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f47f ae9d 	bne.w	800099c <HAL_GPIO_Init+0x10>
  }
}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	371c      	adds	r7, #28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010000 	.word	0x40010000
 8000c78:	48000400 	.word	0x48000400
 8000c7c:	48000800 	.word	0x48000800
 8000c80:	48000c00 	.word	0x48000c00
 8000c84:	48001000 	.word	0x48001000
 8000c88:	48001400 	.word	0x48001400
 8000c8c:	40010400 	.word	0x40010400

08000c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	807b      	strh	r3, [r7, #2]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca0:	787b      	ldrb	r3, [r7, #1]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ca6:	887a      	ldrh	r2, [r7, #2]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cac:	e002      	b.n	8000cb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d141      	bne.n	8000d52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cce:	4b4b      	ldr	r3, [pc, #300]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cda:	d131      	bne.n	8000d40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cdc:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ce2:	4a46      	ldr	r2, [pc, #280]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ce8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cec:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cf4:	4a41      	ldr	r2, [pc, #260]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cfc:	4b40      	ldr	r3, [pc, #256]	; (8000e00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2232      	movs	r2, #50	; 0x32
 8000d02:	fb02 f303 	mul.w	r3, r2, r3
 8000d06:	4a3f      	ldr	r2, [pc, #252]	; (8000e04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d08:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0c:	0c9b      	lsrs	r3, r3, #18
 8000d0e:	3301      	adds	r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d12:	e002      	b.n	8000d1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d1a:	4b38      	ldr	r3, [pc, #224]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d26:	d102      	bne.n	8000d2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f2      	bne.n	8000d14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d2e:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d3a:	d158      	bne.n	8000dee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e057      	b.n	8000df0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d40:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d46:	4a2d      	ldr	r2, [pc, #180]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000d50:	e04d      	b.n	8000dee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d58:	d141      	bne.n	8000dde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d5a:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d66:	d131      	bne.n	8000dcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d6e:	4a23      	ldr	r2, [pc, #140]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d78:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d80:	4a1e      	ldr	r2, [pc, #120]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2232      	movs	r2, #50	; 0x32
 8000d8e:	fb02 f303 	mul.w	r3, r2, r3
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d94:	fba2 2303 	umull	r2, r3, r2, r3
 8000d98:	0c9b      	lsrs	r3, r3, #18
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d9e:	e002      	b.n	8000da6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000db2:	d102      	bne.n	8000dba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f2      	bne.n	8000da0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dc6:	d112      	bne.n	8000dee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e011      	b.n	8000df0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ddc:	e007      	b.n	8000dee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	40007000 	.word	0x40007000
 8000e00:	20000000 	.word	0x20000000
 8000e04:	431bde83 	.word	0x431bde83

08000e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e306      	b.n	8001428 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d075      	beq.n	8000f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e26:	4b97      	ldr	r3, [pc, #604]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 030c 	and.w	r3, r3, #12
 8000e2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e30:	4b94      	ldr	r3, [pc, #592]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	2b0c      	cmp	r3, #12
 8000e3e:	d102      	bne.n	8000e46 <HAL_RCC_OscConfig+0x3e>
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d002      	beq.n	8000e4c <HAL_RCC_OscConfig+0x44>
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	2b08      	cmp	r3, #8
 8000e4a:	d10b      	bne.n	8000e64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e4c:	4b8d      	ldr	r3, [pc, #564]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d05b      	beq.n	8000f10 <HAL_RCC_OscConfig+0x108>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d157      	bne.n	8000f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e2e1      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e6c:	d106      	bne.n	8000e7c <HAL_RCC_OscConfig+0x74>
 8000e6e:	4b85      	ldr	r3, [pc, #532]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a84      	ldr	r2, [pc, #528]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e01d      	b.n	8000eb8 <HAL_RCC_OscConfig+0xb0>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e84:	d10c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x98>
 8000e86:	4b7f      	ldr	r3, [pc, #508]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a7e      	ldr	r2, [pc, #504]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	4b7c      	ldr	r3, [pc, #496]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a7b      	ldr	r2, [pc, #492]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e00b      	b.n	8000eb8 <HAL_RCC_OscConfig+0xb0>
 8000ea0:	4b78      	ldr	r3, [pc, #480]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a77      	ldr	r2, [pc, #476]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b75      	ldr	r3, [pc, #468]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a74      	ldr	r2, [pc, #464]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d013      	beq.n	8000ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fc52 	bl	8000768 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fc4e 	bl	8000768 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e2a6      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eda:	4b6a      	ldr	r3, [pc, #424]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0xc0>
 8000ee6:	e014      	b.n	8000f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fc3e 	bl	8000768 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fc3a 	bl	8000768 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	; 0x64
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e292      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f02:	4b60      	ldr	r3, [pc, #384]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f0      	bne.n	8000ef0 <HAL_RCC_OscConfig+0xe8>
 8000f0e:	e000      	b.n	8000f12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d075      	beq.n	800100a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f1e:	4b59      	ldr	r3, [pc, #356]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f28:	4b56      	ldr	r3, [pc, #344]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	2b0c      	cmp	r3, #12
 8000f36:	d102      	bne.n	8000f3e <HAL_RCC_OscConfig+0x136>
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d002      	beq.n	8000f44 <HAL_RCC_OscConfig+0x13c>
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d11f      	bne.n	8000f84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f44:	4b4f      	ldr	r3, [pc, #316]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d005      	beq.n	8000f5c <HAL_RCC_OscConfig+0x154>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e265      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5c:	4b49      	ldr	r3, [pc, #292]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	061b      	lsls	r3, r3, #24
 8000f6a:	4946      	ldr	r1, [pc, #280]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f70:	4b45      	ldr	r3, [pc, #276]	; (8001088 <HAL_RCC_OscConfig+0x280>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbab 	bl	80006d0 <HAL_InitTick>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d043      	beq.n	8001008 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e251      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d023      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f8c:	4b3d      	ldr	r3, [pc, #244]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a3c      	ldr	r2, [pc, #240]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f98:	f7ff fbe6 	bl	8000768 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fbe2 	bl	8000768 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e23a      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fb2:	4b34      	ldr	r3, [pc, #208]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f0      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fbe:	4b31      	ldr	r3, [pc, #196]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	061b      	lsls	r3, r3, #24
 8000fcc:	492d      	ldr	r1, [pc, #180]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	604b      	str	r3, [r1, #4]
 8000fd2:	e01a      	b.n	800100a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a2a      	ldr	r2, [pc, #168]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fbc2 	bl	8000768 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe8:	f7ff fbbe 	bl	8000768 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e216      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x1e0>
 8001006:	e000      	b.n	800100a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001008:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	2b00      	cmp	r3, #0
 8001014:	d041      	beq.n	800109a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d01c      	beq.n	8001058 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8001020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001024:	4a17      	ldr	r2, [pc, #92]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800102e:	f7ff fb9b 	bl	8000768 <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001036:	f7ff fb97 	bl	8000768 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e1ef      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 800104a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0ef      	beq.n	8001036 <HAL_RCC_OscConfig+0x22e>
 8001056:	e020      	b.n	800109a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 800105a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800105e:	4a09      	ldr	r2, [pc, #36]	; (8001084 <HAL_RCC_OscConfig+0x27c>)
 8001060:	f023 0301 	bic.w	r3, r3, #1
 8001064:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001068:	f7ff fb7e 	bl	8000768 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800106e:	e00d      	b.n	800108c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001070:	f7ff fb7a 	bl	8000768 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d906      	bls.n	800108c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e1d2      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000
 8001088:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800108c:	4b8c      	ldr	r3, [pc, #560]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 800108e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1ea      	bne.n	8001070 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 80a6 	beq.w	80011f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80010ac:	4b84      	ldr	r3, [pc, #528]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 80010ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HAL_RCC_OscConfig+0x2b4>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <HAL_RCC_OscConfig+0x2b6>
 80010bc:	2300      	movs	r3, #0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00d      	beq.n	80010de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b7f      	ldr	r3, [pc, #508]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	4a7e      	ldr	r2, [pc, #504]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	6593      	str	r3, [r2, #88]	; 0x58
 80010ce:	4b7c      	ldr	r3, [pc, #496]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010da:	2301      	movs	r3, #1
 80010dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010de:	4b79      	ldr	r3, [pc, #484]	; (80012c4 <HAL_RCC_OscConfig+0x4bc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d118      	bne.n	800111c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ea:	4b76      	ldr	r3, [pc, #472]	; (80012c4 <HAL_RCC_OscConfig+0x4bc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a75      	ldr	r2, [pc, #468]	; (80012c4 <HAL_RCC_OscConfig+0x4bc>)
 80010f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010f6:	f7ff fb37 	bl	8000768 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010fe:	f7ff fb33 	bl	8000768 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e18b      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001110:	4b6c      	ldr	r3, [pc, #432]	; (80012c4 <HAL_RCC_OscConfig+0x4bc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d108      	bne.n	8001136 <HAL_RCC_OscConfig+0x32e>
 8001124:	4b66      	ldr	r3, [pc, #408]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 8001126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800112a:	4a65      	ldr	r2, [pc, #404]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001134:	e024      	b.n	8001180 <HAL_RCC_OscConfig+0x378>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2b05      	cmp	r3, #5
 800113c:	d110      	bne.n	8001160 <HAL_RCC_OscConfig+0x358>
 800113e:	4b60      	ldr	r3, [pc, #384]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 8001140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001144:	4a5e      	ldr	r2, [pc, #376]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800114e:	4b5c      	ldr	r3, [pc, #368]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 8001150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001154:	4a5a      	ldr	r2, [pc, #360]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800115e:	e00f      	b.n	8001180 <HAL_RCC_OscConfig+0x378>
 8001160:	4b57      	ldr	r3, [pc, #348]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 8001162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001166:	4a56      	ldr	r2, [pc, #344]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001170:	4b53      	ldr	r3, [pc, #332]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 8001172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001176:	4a52      	ldr	r2, [pc, #328]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 8001178:	f023 0304 	bic.w	r3, r3, #4
 800117c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d016      	beq.n	80011b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001188:	f7ff faee 	bl	8000768 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800118e:	e00a      	b.n	80011a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001190:	f7ff faea 	bl	8000768 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f241 3288 	movw	r2, #5000	; 0x1388
 800119e:	4293      	cmp	r3, r2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e140      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011a6:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 80011a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0ed      	beq.n	8001190 <HAL_RCC_OscConfig+0x388>
 80011b4:	e015      	b.n	80011e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b6:	f7ff fad7 	bl	8000768 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011be:	f7ff fad3 	bl	8000768 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e129      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011d4:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 80011d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1ed      	bne.n	80011be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011e2:	7ffb      	ldrb	r3, [r7, #31]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e8:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	4a34      	ldr	r2, [pc, #208]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 80011ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0320 	and.w	r3, r3, #32
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d03c      	beq.n	800127a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d01c      	beq.n	8001242 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 800120a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800120e:	4a2c      	ldr	r2, [pc, #176]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001218:	f7ff faa6 	bl	8000768 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001220:	f7ff faa2 	bl	8000768 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e0fa      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 8001234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0ef      	beq.n	8001220 <HAL_RCC_OscConfig+0x418>
 8001240:	e01b      	b.n	800127a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 8001244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001248:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001252:	f7ff fa89 	bl	8000768 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800125a:	f7ff fa85 	bl	8000768 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e0dd      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 800126e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1ef      	bne.n	800125a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80d1 	beq.w	8001426 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 030c 	and.w	r3, r3, #12
 800128c:	2b0c      	cmp	r3, #12
 800128e:	f000 808b 	beq.w	80013a8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d15e      	bne.n	8001358 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_RCC_OscConfig+0x4b8>)
 80012a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a6:	f7ff fa5f 	bl	8000768 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ac:	e00c      	b.n	80012c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ae:	f7ff fa5b 	bl	8000768 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d905      	bls.n	80012c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e0b3      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012c8:	4b59      	ldr	r3, [pc, #356]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1ec      	bne.n	80012ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d4:	4b56      	ldr	r3, [pc, #344]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	4b56      	ldr	r3, [pc, #344]	; (8001434 <HAL_RCC_OscConfig+0x62c>)
 80012da:	4013      	ands	r3, r2
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6a11      	ldr	r1, [r2, #32]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012e4:	3a01      	subs	r2, #1
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	4311      	orrs	r1, r2
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80012ee:	0212      	lsls	r2, r2, #8
 80012f0:	4311      	orrs	r1, r2
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012f6:	0852      	lsrs	r2, r2, #1
 80012f8:	3a01      	subs	r2, #1
 80012fa:	0552      	lsls	r2, r2, #21
 80012fc:	4311      	orrs	r1, r2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001302:	0852      	lsrs	r2, r2, #1
 8001304:	3a01      	subs	r2, #1
 8001306:	0652      	lsls	r2, r2, #25
 8001308:	4311      	orrs	r1, r2
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800130e:	06d2      	lsls	r2, r2, #27
 8001310:	430a      	orrs	r2, r1
 8001312:	4947      	ldr	r1, [pc, #284]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 8001314:	4313      	orrs	r3, r2
 8001316:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001318:	4b45      	ldr	r3, [pc, #276]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a44      	ldr	r2, [pc, #272]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 800131e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001322:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001324:	4b42      	ldr	r3, [pc, #264]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	4a41      	ldr	r2, [pc, #260]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 800132a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800132e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff fa1a 	bl	8000768 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001338:	f7ff fa16 	bl	8000768 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e06e      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800134a:	4b39      	ldr	r3, [pc, #228]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x530>
 8001356:	e066      	b.n	8001426 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a34      	ldr	r2, [pc, #208]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 800135e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001362:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	4a31      	ldr	r2, [pc, #196]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 800136a:	f023 0303 	bic.w	r3, r3, #3
 800136e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	4a2e      	ldr	r2, [pc, #184]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 8001376:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800137a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff f9f2 	bl	8000768 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001388:	f7ff f9ee 	bl	8000768 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e046      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x580>
 80013a6:	e03e      	b.n	8001426 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e039      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <HAL_RCC_OscConfig+0x628>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 0203 	and.w	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d12c      	bne.n	8001422 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	3b01      	subs	r3, #1
 80013d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d123      	bne.n	8001422 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d11b      	bne.n	8001422 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d113      	bne.n	8001422 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	085b      	lsrs	r3, r3, #1
 8001406:	3b01      	subs	r3, #1
 8001408:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800140a:	429a      	cmp	r2, r3
 800140c:	d109      	bne.n	8001422 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001418:	085b      	lsrs	r3, r3, #1
 800141a:	3b01      	subs	r3, #1
 800141c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800141e:	429a      	cmp	r2, r3
 8001420:	d001      	beq.n	8001426 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000
 8001434:	019f800c 	.word	0x019f800c

08001438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e11e      	b.n	800168e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001450:	4b91      	ldr	r3, [pc, #580]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d910      	bls.n	8001480 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	4b8e      	ldr	r3, [pc, #568]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 020f 	bic.w	r2, r3, #15
 8001466:	498c      	ldr	r1, [pc, #560]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800146e:	4b8a      	ldr	r3, [pc, #552]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d001      	beq.n	8001480 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e106      	b.n	800168e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d073      	beq.n	8001574 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d129      	bne.n	80014e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001494:	4b81      	ldr	r3, [pc, #516]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0f4      	b.n	800168e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80014a4:	f000 f966 	bl	8001774 <RCC_GetSysClockFreqFromPLLSource>
 80014a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4a7c      	ldr	r2, [pc, #496]	; (80016a0 <HAL_RCC_ClockConfig+0x268>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d93f      	bls.n	8001532 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014b2:	4b7a      	ldr	r3, [pc, #488]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d033      	beq.n	8001532 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d12f      	bne.n	8001532 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014d2:	4b72      	ldr	r3, [pc, #456]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014da:	4a70      	ldr	r2, [pc, #448]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e024      	b.n	8001532 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d107      	bne.n	8001500 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f0:	4b6a      	ldr	r3, [pc, #424]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d109      	bne.n	8001510 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0c6      	b.n	800168e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001500:	4b66      	ldr	r3, [pc, #408]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0be      	b.n	800168e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001510:	f000 f8ce 	bl	80016b0 <HAL_RCC_GetSysClockFreq>
 8001514:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4a61      	ldr	r2, [pc, #388]	; (80016a0 <HAL_RCC_ClockConfig+0x268>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d909      	bls.n	8001532 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800151e:	4b5f      	ldr	r3, [pc, #380]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001526:	4a5d      	ldr	r2, [pc, #372]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 8001528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001532:	4b5a      	ldr	r3, [pc, #360]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f023 0203 	bic.w	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4957      	ldr	r1, [pc, #348]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001544:	f7ff f910 	bl	8000768 <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e00a      	b.n	8001562 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff f90c 	bl	8000768 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e095      	b.n	800168e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	4b4e      	ldr	r3, [pc, #312]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 020c 	and.w	r2, r3, #12
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	429a      	cmp	r2, r3
 8001572:	d1eb      	bne.n	800154c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d023      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800158c:	4b43      	ldr	r3, [pc, #268]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a42      	ldr	r2, [pc, #264]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 8001592:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001596:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80015a4:	4b3d      	ldr	r3, [pc, #244]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80015ac:	4a3b      	ldr	r2, [pc, #236]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 80015ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b4:	4b39      	ldr	r3, [pc, #228]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4936      	ldr	r1, [pc, #216]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	608b      	str	r3, [r1, #8]
 80015c6:	e008      	b.n	80015da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b80      	cmp	r3, #128	; 0x80
 80015cc:	d105      	bne.n	80015da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80015ce:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	4a32      	ldr	r2, [pc, #200]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 80015d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d21d      	bcs.n	8001624 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e8:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 020f 	bic.w	r2, r3, #15
 80015f0:	4929      	ldr	r1, [pc, #164]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015f8:	f7ff f8b6 	bl	8000768 <HAL_GetTick>
 80015fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001600:	f7ff f8b2 	bl	8000768 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	; 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e03b      	b.n	800168e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d1ed      	bne.n	8001600 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	4917      	ldr	r1, [pc, #92]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	490f      	ldr	r1, [pc, #60]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001662:	f000 f825 	bl	80016b0 <HAL_RCC_GetSysClockFreq>
 8001666:	4602      	mov	r2, r0
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	490c      	ldr	r1, [pc, #48]	; (80016a4 <HAL_RCC_ClockConfig+0x26c>)
 8001674:	5ccb      	ldrb	r3, [r1, r3]
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_RCC_ClockConfig+0x270>)
 8001680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_RCC_ClockConfig+0x274>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff f822 	bl	80006d0 <HAL_InitTick>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40022000 	.word	0x40022000
 800169c:	40021000 	.word	0x40021000
 80016a0:	04c4b400 	.word	0x04c4b400
 80016a4:	08001870 	.word	0x08001870
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80016b6:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d102      	bne.n	80016c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	e047      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d102      	bne.n	80016da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016d4:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	e03e      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	d136      	bne.n	8001754 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3301      	adds	r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d10c      	bne.n	800171e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001704:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	fbb2 f3f3 	udiv	r3, r2, r3
 800170c:	4a16      	ldr	r2, [pc, #88]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800170e:	68d2      	ldr	r2, [r2, #12]
 8001710:	0a12      	lsrs	r2, r2, #8
 8001712:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001716:	fb02 f303 	mul.w	r3, r2, r3
 800171a:	617b      	str	r3, [r7, #20]
      break;
 800171c:	e00c      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800171e:	4a13      	ldr	r2, [pc, #76]	; (800176c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	4a10      	ldr	r2, [pc, #64]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001728:	68d2      	ldr	r2, [r2, #12]
 800172a:	0a12      	lsrs	r2, r2, #8
 800172c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001730:	fb02 f303 	mul.w	r3, r2, r3
 8001734:	617b      	str	r3, [r7, #20]
      break;
 8001736:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0e5b      	lsrs	r3, r3, #25
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	3301      	adds	r3, #1
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	e001      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001758:	693b      	ldr	r3, [r7, #16]
}
 800175a:	4618      	mov	r0, r3
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	00f42400 	.word	0x00f42400
 8001770:	007a1200 	.word	0x007a1200

08001774 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	3301      	adds	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d10c      	bne.n	80017b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001798:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a0:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017a2:	68d2      	ldr	r2, [r2, #12]
 80017a4:	0a12      	lsrs	r2, r2, #8
 80017a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
    break;
 80017b0:	e00c      	b.n	80017cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017bc:	68d2      	ldr	r2, [r2, #12]
 80017be:	0a12      	lsrs	r2, r2, #8
 80017c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017c4:	fb02 f303 	mul.w	r3, r2, r3
 80017c8:	617b      	str	r3, [r7, #20]
    break;
 80017ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0e5b      	lsrs	r3, r3, #25
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	3301      	adds	r3, #1
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80017e6:	687b      	ldr	r3, [r7, #4]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000
 80017f8:	007a1200 	.word	0x007a1200
 80017fc:	00f42400 	.word	0x00f42400

08001800 <__libc_init_array>:
 8001800:	b570      	push	{r4, r5, r6, lr}
 8001802:	4d0d      	ldr	r5, [pc, #52]	; (8001838 <__libc_init_array+0x38>)
 8001804:	4c0d      	ldr	r4, [pc, #52]	; (800183c <__libc_init_array+0x3c>)
 8001806:	1b64      	subs	r4, r4, r5
 8001808:	10a4      	asrs	r4, r4, #2
 800180a:	2600      	movs	r6, #0
 800180c:	42a6      	cmp	r6, r4
 800180e:	d109      	bne.n	8001824 <__libc_init_array+0x24>
 8001810:	4d0b      	ldr	r5, [pc, #44]	; (8001840 <__libc_init_array+0x40>)
 8001812:	4c0c      	ldr	r4, [pc, #48]	; (8001844 <__libc_init_array+0x44>)
 8001814:	f000 f820 	bl	8001858 <_init>
 8001818:	1b64      	subs	r4, r4, r5
 800181a:	10a4      	asrs	r4, r4, #2
 800181c:	2600      	movs	r6, #0
 800181e:	42a6      	cmp	r6, r4
 8001820:	d105      	bne.n	800182e <__libc_init_array+0x2e>
 8001822:	bd70      	pop	{r4, r5, r6, pc}
 8001824:	f855 3b04 	ldr.w	r3, [r5], #4
 8001828:	4798      	blx	r3
 800182a:	3601      	adds	r6, #1
 800182c:	e7ee      	b.n	800180c <__libc_init_array+0xc>
 800182e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001832:	4798      	blx	r3
 8001834:	3601      	adds	r6, #1
 8001836:	e7f2      	b.n	800181e <__libc_init_array+0x1e>
 8001838:	08001880 	.word	0x08001880
 800183c:	08001880 	.word	0x08001880
 8001840:	08001880 	.word	0x08001880
 8001844:	08001884 	.word	0x08001884

08001848 <memset>:
 8001848:	4402      	add	r2, r0
 800184a:	4603      	mov	r3, r0
 800184c:	4293      	cmp	r3, r2
 800184e:	d100      	bne.n	8001852 <memset+0xa>
 8001850:	4770      	bx	lr
 8001852:	f803 1b01 	strb.w	r1, [r3], #1
 8001856:	e7f9      	b.n	800184c <memset+0x4>

08001858 <_init>:
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	bf00      	nop
 800185c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800185e:	bc08      	pop	{r3}
 8001860:	469e      	mov	lr, r3
 8001862:	4770      	bx	lr

08001864 <_fini>:
 8001864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001866:	bf00      	nop
 8001868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800186a:	bc08      	pop	{r3}
 800186c:	469e      	mov	lr, r3
 800186e:	4770      	bx	lr
